! function () {
    var A = undefined;
    var e = {};
    window.libsignal = {};
    var t;
    var r = r !== undefined ? r : {};
    var n = {};
    for (t in r) {
        if (r.hasOwnProperty(t)) {
            n[t] = r[t];
        }
    }
    var g = [];
    var o = false;
    var I = false;
    var s = false;
    var f = false;
    o = typeof window == "object";
    I = typeof importScripts == "function";
    s = typeof A == "object" && typeof A.versions == "object" && typeof A.versions.node == "string";
    f = !o && !s && !I;
    var a;
    var h;
    var B;
    var C;
    var E = "";

    function u (A) {
        if (r.locateFile) {
            return r.locateFile(A, E);
        } else {
            return E + A;
        }
    }
    if (s) {
        E = I ? require("path").dirname(E) + "/" : __dirname + "/";
        a = function (A, e) {
            var t = oA(A);
            if (t) {
                if (e) {
                    return t;
                } else {
                    return t.toString();
                }
            } else {
                if (!B) {
                    B = require("fs");
                }
                if (!C) {
                    C = require("path");
                }
                A = C.normalize(A);
                return B.readFileSync(A, e ? null : "utf8");
            }
        };
        h = function (A) {
            var e = a(A, true);
            if (!e.buffer) {
                e = new Uint8Array(e);
            }
            d(e.buffer);
            return e;
        };
        if (A.argv.length > 1) {
            A.argv[1].replace(/\\/g, "/");
        }
        g = A.argv.slice(2);
        if (typeof module != "undefined") {
            module.exports = r;
        }
        A.on("uncaughtException", function (A) {
            if (!(A instanceof BA)) {
                throw A;
            }
        });
        A.on("unhandledRejection", x);
        r.inspect = function () {
            return "[Emscripten Module object]";
        };
    } else if (f) {
        if (typeof read != "undefined") {
            a = function (A) {
                var e = oA(A);
                if (e) {
                    return rA(e);
                } else {
                    return read(A);
                }
            };
        }
        h = function (A) {
            var e;
            if (e = oA(A)) {
                return e;
            } else if (typeof readbuffer == "function") {
                return new Uint8Array(readbuffer(A));
            } else {
                d(typeof (e = read(A, "binary")) == "object");
                return e;
            }
        };
        if (typeof scriptArgs != "undefined") {
            g = scriptArgs;
        } else if (arguments !== undefined) {
            g = arguments;
        }
        if (typeof print != "undefined") {
            if (typeof console == "undefined") {
                console = {};
            }
            console.log = print;
            console.warn = console.error = typeof printErr != "undefined" ? printErr : print;
        }
    } else if (o || I) {
        if (I) {
            E = self.location.href;
        } else if (document.currentScript) {
            E = document.currentScript.src;
        }
        E = E.indexOf("blob:") !== 0 ? E.substr(0, E.lastIndexOf("/") + 1) : "";
        a = function (A) {
            try {
                var e = new XMLHttpRequest();
                e.open("GET", A, false);
                e.send(null);
                return e.responseText;
            } catch (e) {
                var t = oA(A);
                if (t) {
                    return rA(t);
                }
                throw e;
            }
        };
        if (I) {
            h = function (A) {
                try {
                    var e = new XMLHttpRequest();
                    e.open("GET", A, false);
                    e.responseType = "arraybuffer";
                    e.send(null);
                    return new Uint8Array(e.response);
                } catch (e) {
                    var t = oA(A);
                    if (t) {
                        return t;
                    }
                    throw e;
                }
            };
        }
    }
    if (!r.print) {
        console.log.bind(console);
    }
    var Q;
    var c;
    var l = r.printErr || console.warn.bind(console);
    for (t in n) {
        if (n.hasOwnProperty(t)) {
            r[t] = n[t];
        }
    }
    n = null;
    if (r.arguments) {
        g = r.arguments;
    }
    if (r.thisProgram) {
        r.thisProgram;
    }
    if (r.quit) {
        r.quit;
    }
    if (r.wasmBinary) {
        Q = r.wasmBinary;
    }
    if (r.noExitRuntime) {
        r.noExitRuntime;
    }
    if (typeof WebAssembly != "object") {
        x("no native wasm support detected");
    }
    var w = new WebAssembly.Table({
        initial: 1,
        maximum: 1,
        element: "anyfunc"
    });
    var y = false;

    function d (A, e) {
        if (!A) {
            x("Assertion failed: " + e);
        }
    }
    if (typeof TextDecoder != "undefined") {
        new TextDecoder("utf8");
    }
    if (typeof TextDecoder != "undefined") {
        new TextDecoder("utf-16le");
    }
    var p;
    var D;
    var v = 65536;

    function S (A) {
        p = A;
        r.HEAP8 = new Int8Array(A);
        r.HEAP16 = new Int16Array(A);
        r.HEAP32 = new Int32Array(A);
        r.HEAPU8 = D = new Uint8Array(A);
        r.HEAPU16 = new Uint16Array(A);
        r.HEAPU32 = new Uint32Array(A);
        r.HEAPF32 = new Float32Array(A);
        r.HEAPF64 = new Float64Array(A);
    }
    var b = r.INITIAL_MEMORY || 16777216;
    if (c = r.wasmMemory ? r.wasmMemory : new WebAssembly.Memory({
            initial: b / v,
            maximum: b / v
        })) {
        p = c.buffer;
    }
    b = p.byteLength;
    S(p);
    var m = [];
    var P = [];
    var F = [];
    var M = [];

    function N () {
        if (r.preRun) {
            for (typeof r.preRun == "function" && (r.preRun = [r.preRun]); r.preRun.length;) {
                T(r.preRun.shift());
            }
        }
        $(m);
    }

    function k () {
        $(P);
    }

    function H () {
        $(F);
    }

    function G () {
        if (r.postRun) {
            for (typeof r.postRun == "function" && (r.postRun = [r.postRun]); r.postRun.length;) {
                K(r.postRun.shift());
            }
        }
        $(M);
    }

    function T (A) {
        m.unshift(A);
    }

    function K (A) {
        M.unshift(A);
    }
    Math.abs;
    Math.ceil;
    Math.floor;
    Math.min;
    var Y = 0;
    var R = null;
    var U = null;

    function L (A) {
        Y++;
        if (r.monitorRunDependencies) {
            r.monitorRunDependencies(Y);
        }
    }

    function J (A) {
        Y--;
        if (r.monitorRunDependencies) {
            r.monitorRunDependencies(Y);
        }
        if (Y == 0 && (R !== null && (clearInterval(R), R = null), U)) {
            var e = U;
            U = null;
            e();
        }
    }

    function x (A) {
        if (r.onAbort) {
            r.onAbort(A);
        }
        l(A += "");
        y = true;
        A = "abort(" + A + "). Build with -s ASSERTIONS=1 for more info.";
        throw new WebAssembly.RuntimeError(A);
    }

    function O (A, e) {
        if (String.prototype.startsWith) {
            return A.startsWith(e);
        } else {
            return A.indexOf(e) === 0;
        }
    }
    r.preloadedImages = {};
    r.preloadedAudios = {};
    var q = "data:application/octet-stream;base64,";

    function W (A) {
        return O(A, q);
    }
    var X = "file://";

    function V (A) {
        return O(A, X);
    }
    var j = "data:application/octet-stream;base64,";

    function Z () {
        try {
            if (Q) {
                return new Uint8Array(Q);
            }
            var A = oA(j);
            if (A) {
                return A;
            }
            if (h) {
                return h(j);
            }
            throw "both async and sync fetching of the wasm failed";
        } catch (A) {
            x(A);
        }
    }

    function z () {
        if (Q || !o && !I || typeof fetch != "function" || V(j)) {
            return Promise.resolve().then(Z);
        } else {
            return fetch(j, {
                credentials: "same-origin"
            }).then(function (A) {
                if (!A.ok) {
                    throw "failed to load wasm binary file at '" + j + "'";
                }
                return A.arrayBuffer();
            }).catch(function () {
                return Z();
            });
        }
    }

    function _ () {
        var A = {
            env: aA,
            wasi_snapshot_preview1: aA
        };

        function e (A, e) {
            var t = A.exports;
            r.asm = t;
            J();
        }

        function t (A) {
            e(A.instance);
        }

        function i (e) {
            return z().then(function (e) {
                return WebAssembly.instantiate(e, A);
            }).then(e, function (A) {
                l("failed to asynchronously prepare wasm: " + A);
                x(A);
            });
        }
        L();
        if (r.instantiateWasm) {
            try {
                return r.instantiateWasm(A, e);
            } catch (A) {
                l("Module.instantiateWasm callback failed with error: " + A);
                return false;
            }
        }
        (function () {
            if (Q || typeof WebAssembly.instantiateStreaming != "function" || W(j) || V(j) || typeof fetch != "function") {
                return i(t);
            }
            fetch(j, {
                credentials: "same-origin"
            }).then(function (e) {
                return WebAssembly.instantiateStreaming(e, A).then(t, function (A) {
                    l("wasm streaming compile failed: " + A);
                    l("falling back to ArrayBuffer instantiation");
                    return i(t);
                });
            });
        })();
        return {};
    }

    function $ (A) {
        for (; A.length > 0;) {
            var e = A.shift();
            if (typeof e != "function") {
                var t = e.func;
                if (typeof t == "number") {
                    if (e.arg === undefined) {
                        w.get(t)();
                    } else {
                        w.get(t)(e.arg);
                    }
                } else {
                    t(e.arg === undefined ? null : e.arg);
                }
            } else {
                e(r);
            }
        }
    }

    function AA (A, e, t) {
        D.copyWithin(A, e, e + t);
    }

    function eA (A) {
        x("OOM");
    }

    function tA (A) {
        eA();
    }
    if (!W(j)) {
        j = u(j);
    }
    P.push({
        func: function () {
            hA();
        }
    });
    var iA = false;

    function rA (A) {
        for (var e = [], t = 0; t < A.length; t++) {
            var i = A[t];
            if (i > 255) {
                if (iA) {
                    d(false, "Character code " + i + " (" + String.fromCharCode(i) + ")  at offset " + t + " not in 0x00-0xFF.");
                }
                i &= 255;
            }
            e.push(String.fromCharCode(i));
        }
        return e.join("");
    }
    var nA = typeof atob == "function" ? atob : function (A) {
        var e;
        var t;
        var i;
        var r;
        var n;
        var g;
        var o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var I = "";
        var s = 0;
        A = A.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        do {
            e = o.indexOf(A.charAt(s++)) << 2 | (r = o.indexOf(A.charAt(s++))) >> 4;
            t = (r & 15) << 4 | (n = o.indexOf(A.charAt(s++))) >> 2;
            i = (n & 3) << 6 | (g = o.indexOf(A.charAt(s++)));
            I += String.fromCharCode(e);
            if (n !== 64) {
                I += String.fromCharCode(t);
            }
            if (g !== 64) {
                I += String.fromCharCode(i);
            }
        } while (s < A.length);
        return I;
    };

    function gA (A) {
        if (typeof s == "boolean" && s) {
            var e;
            try {
                e = Buffer.from(A, "base64");
            } catch (t) {
                e = new Buffer(A, "base64");
            }
            return new Uint8Array(e.buffer, e.byteOffset, e.byteLength);
        }
        try {
            for (var t = nA(A), i = new Uint8Array(t.length), r = 0; r < t.length; ++r) {
                i[r] = t.charCodeAt(r);
            }
            return i;
        } catch (A) {
            throw new Error("Converting base64 string to bytes failed.");
        }
    }

    function oA (A) {
        if (W(A)) {
            return gA(A.slice(q.length));
        }
    }
    var IA;
    var sA;
    var fA;
    var aA = {
        __indirect_function_table: w,
        emscripten_memcpy_big: AA,
        emscripten_resize_heap: tA,
        memory: c
    };
    _();
    var hA = r.___wasm_call_ctors = function () {
        return (hA = r.___wasm_call_ctors = r.asm.__wasm_call_ctors).apply(null, arguments);
    };

    function BA (A) {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + A + ")";
        this.status = A;
    }

    function CA (A) {
        function e () {
            if (!IA) {
                IA = true;
                r.calledRun = true;
                if (!y) {
                    k();
                    H();
                    if (r.onRuntimeInitialized) {
                        r.onRuntimeInitialized();
                    }
                    G();
                }
            }
        }
        A = A || g;
        if (!(Y > 0)) {
            N();
            if (!(Y > 0)) {
                if (r.setStatus) {
                    r.setStatus("Running...");
                    setTimeout(function () {
                        setTimeout(function () {
                            r.setStatus("");
                        }, 1);
                        e();
                    }, 1);
                } else {
                    e();
                }
            }
        }
    }
    r._crypto_sign_ed25519_ref10_ge_scalarmult_base = function () {
        return (r._crypto_sign_ed25519_ref10_ge_scalarmult_base = r.asm.crypto_sign_ed25519_ref10_ge_scalarmult_base).apply(null, arguments);
    };
    r._curve25519_sign = function () {
        return (r._curve25519_sign = r.asm.curve25519_sign).apply(null, arguments);
    };
    r._curve25519_verify = function () {
        return (r._curve25519_verify = r.asm.curve25519_verify).apply(null, arguments);
    };
    r._sph_sha512_init = function () {
        return (r._sph_sha512_init = r.asm.sph_sha512_init).apply(null, arguments);
    };
    r._curve25519_donna = function () {
        return (r._curve25519_donna = r.asm.curve25519_donna).apply(null, arguments);
    };
    r.___errno_location = function () {
        return (r.___errno_location = r.asm.__errno_location).apply(null, arguments);
    };
    r.stackSave = function () {
        return (r.stackSave = r.asm.stackSave).apply(null, arguments);
    };
    r.stackRestore = function () {
        return (r.stackRestore = r.asm.stackRestore).apply(null, arguments);
    };
    r.stackAlloc = function () {
        return (r.stackAlloc = r.asm.stackAlloc).apply(null, arguments);
    };
    r._malloc = function () {
        return (r._malloc = r.asm.malloc).apply(null, arguments);
    };
    r._free = function () {
        return (r._free = r.asm.free).apply(null, arguments);
    };
    r.__growWasmMemory = function () {
        return (r.__growWasmMemory = r.asm.__growWasmMemory).apply(null, arguments);
    };
    U = function A () {
        if (!IA) {
            CA();
        }
        if (!IA) {
            U = A;
        }
    };
    r.run = CA;
    if (r.preInit) {
        for (typeof r.preInit == "function" && (r.preInit = [r.preInit]); r.preInit.length > 0;) {
            r.preInit.pop()();
        }
    }
    CA();
    e = e || {};
    (function () {
        "use strict";

        function A (A) {
            var e = r._malloc(A.length);
            r.HEAPU8.set(A, e);
            return e;
        }

        function t (A, e, t) {
            t.set(r.HEAPU8.subarray(A, A + e));
        }
        var i = new Uint8Array(32);
        i[0] = 9;
        e.curve25519 = {
            keyPair: function (e) {
                var n = new Uint8Array(e);
                n[0] &= 248;
                n[31] &= 127;
                n[31] |= 64;
                var g = r._malloc(32);
                var o = A(n);
                var I = A(i);
                r._curve25519_donna(g, o, I);
                var s = new Uint8Array(32);
                t(g, 32, s);
                r._free(g);
                r._free(o);
                r._free(I);
                return {
                    pubKey: s.buffer,
                    privKey: n.buffer
                };
            },
            sharedSecret: function (e, i) {
                var n = r._malloc(32);
                var g = A(new Uint8Array(i));
                var o = A(new Uint8Array(e));
                r._curve25519_donna(n, g, o);
                var I = new Uint8Array(32);
                t(n, 32, I);
                r._free(n);
                r._free(g);
                r._free(o);
                return I.buffer;
            },
            sign: function (e, i) {
                var n = r._malloc(64);
                var g = A(new Uint8Array(e));
                var o = A(new Uint8Array(i));
                r._curve25519_sign(n, g, o, i.byteLength);
                var I = new Uint8Array(64);
                t(n, 64, I);
                r._free(n);
                r._free(g);
                r._free(o);
                return I.buffer;
            },
            verify: function (e, t, i) {
                var n = A(new Uint8Array(e));
                var g = A(new Uint8Array(i));
                var o = A(new Uint8Array(t));
                var I = r._curve25519_verify(g, n, o, t.byteLength);
                r._free(n);
                r._free(g);
                r._free(o);
                return I !== 0;
            }
        };
        e.curve25519_async = {
            keyPair: function (A) {
                return new Promise(function (t) {
                    t(e.curve25519.keyPair(A));
                });
            },
            sharedSecret: function (A, t) {
                return new Promise(function (i) {
                    i(e.curve25519.sharedSecret(A, t));
                });
            },
            sign: function (A, t) {
                return new Promise(function (i) {
                    i(e.curve25519.sign(A, t));
                });
            },
            verify: function (A, t, i) {
                return new Promise(function (r, n) {
                    if (e.curve25519.verify(A, t, i)) {
                        n(new Error("Invalid signature"));
                    } else {
                        r();
                    }
                });
            }
        };
    })();
    (function () {
        "use strict";

        var A = e.curve25519_async;

        function t (A) {
            this.jobs = {};
            this.jobId = 0;
            this.worker = new Worker(A);
            this.worker.onmessage = function (A) {
                var e = this.jobs[A.data.id];
                if (A.data.error && typeof e.onerror == "function") {
                    e.onerror(new Error(A.data.error));
                } else if (typeof e.onsuccess == "function") {
                    e.onsuccess(A.data.result);
                }
                delete this.jobs[A.data.id];
            }.bind(this);
        }
        e.startWorker = function (A) {
            e.stopWorker();
            e.curve25519_async = new t(A);
        };
        e.stopWorker = function () {
            if (e.curve25519_async instanceof t) {
                var i = e.curve25519_async.worker;
                e.curve25519_async = A;
                i.terminate();
            }
        };
        libsignal.worker = {
            startWorker: e.startWorker,
            stopWorker: e.stopWorker
        };
        t.prototype = {
            constructor: t,
            postMessage: function (A, e, t, i) {
                return new Promise(function (t, i) {
                    this.jobs[this.jobId] = {
                        onsuccess: t,
                        onerror: i
                    };
                    this.worker.postMessage({
                        id: this.jobId,
                        methodName: A,
                        args: e
                    });
                    this.jobId++;
                }.bind(this));
            },
            keyPair: function (A) {
                return this.postMessage("keyPair", [A]);
            },
            sharedSecret: function (A, e) {
                return this.postMessage("sharedSecret", [A, e]);
            },
            sign: function (A, e) {
                return this.postMessage("sign", [A, e]);
            },
            verify: function (A, e, t) {
                return this.postMessage("verify", [A, e, t]);
            }
        };
    })();
    /**
     * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/long.js for details
     */
    sA = this;
    fA = function () {
        "use strict";

        function A (A, e, t) {
            this.low = A | 0;
            this.high = e | 0;
            this.unsigned = !!t;
        }

        function e (A) {
            return (A && A.__isLong__) === true;
        }
        A.prototype.__isLong__;
        Object.defineProperty(A.prototype, "__isLong__", {
            value: true,
            enumerable: false,
            configurable: false
        });
        A.isLong = e;
        var t = {};
        var i = {};

        function r (A, e) {
            var r;
            var n;
            var o;
            if (e) {
                if ((o = (A >>>= 0) >= 0 && A < 256) && (n = i[A])) {
                    return n;
                } else {
                    r = g(A, (A | 0) < 0 ? -1 : 0, true);
                    if (o) {
                        i[A] = r;
                    }
                    return r;
                }
            } else if ((o = (A |= 0) >= -128 && A < 128) && (n = t[A])) {
                return n;
            } else {
                r = g(A, A < 0 ? -1 : 0, false);
                if (o) {
                    t[A] = r;
                }
                return r;
            }
        }

        function n (A, e) {
            if (isNaN(A) || !isFinite(A)) {
                if (e) {
                    return E;
                } else {
                    return C;
                }
            }
            if (e) {
                if (A < 0) {
                    return E;
                }
                if (A >= a) {
                    return w;
                }
            } else {
                if (A <= -h) {
                    return y;
                }
                if (A + 1 >= h) {
                    return l;
                }
            }
            if (A < 0) {
                return n(-A, e).neg();
            } else {
                return g(A % f | 0, A / f | 0, e);
            }
        }

        function g (e, t, i) {
            return new A(e, t, i);
        }
        A.fromInt = r;
        A.fromNumber = n;
        A.fromBits = g;
        var o = Math.pow;

        function I (A, e, t) {
            if (A.length === 0) {
                throw Error("empty string");
            }
            if (A === "NaN" || A === "Infinity" || A === "+Infinity" || A === "-Infinity") {
                return C;
            }
            if (typeof e == "number") {
                t = e;
                e = false;
            } else {
                e = !!e;
            }
            if ((t = t || 10) < 2 || t > 36) {
                throw RangeError("radix");
            }
            var i;
            if ((i = A.indexOf("-")) > 0) {
                throw Error("interior hyphen");
            }
            if (i === 0) {
                return I(A.substring(1), e, t).neg();
            }
            for (var r = n(o(t, 8)), g = C, s = 0; s < A.length; s += 8) {
                var f = Math.min(8, A.length - s);
                var a = parseInt(A.substring(s, s + f), t);
                if (f < 8) {
                    var h = n(o(t, f));
                    g = g.mul(h).add(n(a));
                } else {
                    g = (g = g.mul(r)).add(n(a));
                }
            }
            g.unsigned = e;
            return g;
        }

        function s (e) {
            if (e instanceof A) {
                return e;
            } else if (typeof e == "number") {
                return n(e);
            } else if (typeof e == "string") {
                return I(e);
            } else {
                return g(e.low, e.high, e.unsigned);
            }
        }
        A.fromString = I;
        A.fromValue = s;
        var f = 4294967296;
        var a = f * f;
        var h = a / 2;
        var B = r(1 << 24);
        var C = r(0);
        A.ZERO = C;
        var E = r(0, true);
        A.UZERO = E;
        var u = r(1);
        A.ONE = u;
        var Q = r(1, true);
        A.UONE = Q;
        var c = r(-1);
        A.NEG_ONE = c;
        var l = g(-1, 2147483647, false);
        A.MAX_VALUE = l;
        var w = g(-1, -1, true);
        A.MAX_UNSIGNED_VALUE = w;
        var y = g(0, -2147483648, false);
        A.MIN_VALUE = y;
        var d = A.prototype;
        d.toInt = function () {
            if (this.unsigned) {
                return this.low >>> 0;
            } else {
                return this.low;
            }
        };
        d.toNumber = function () {
            if (this.unsigned) {
                return (this.high >>> 0) * f + (this.low >>> 0);
            } else {
                return this.high * f + (this.low >>> 0);
            }
        };
        d.toString = function (A) {
            if ((A = A || 10) < 2 || A > 36) {
                throw RangeError("radix");
            }
            if (this.isZero()) {
                return "0";
            }
            if (this.isNegative()) {
                if (this.eq(y)) {
                    var e = n(A);
                    var t = this.div(e);
                    var i = t.mul(e).sub(this);
                    return t.toString(A) + i.toInt().toString(A);
                }
                return "-" + this.neg().toString(A);
            }
            for (var r = n(o(A, 6), this.unsigned), g = this, I = "";;) {
                var s = g.div(r);
                var f = (g.sub(s.mul(r)).toInt() >>> 0).toString(A);
                if ((g = s).isZero()) {
                    return f + I;
                }
                for (; f.length < 6;) {
                    f = "0" + f;
                }
                I = "" + f + I;
            }
        };
        d.getHighBits = function () {
            return this.high;
        };
        d.getHighBitsUnsigned = function () {
            return this.high >>> 0;
        };
        d.getLowBits = function () {
            return this.low;
        };
        d.getLowBitsUnsigned = function () {
            return this.low >>> 0;
        };
        d.getNumBitsAbs = function () {
            if (this.isNegative()) {
                if (this.eq(y)) {
                    return 64;
                } else {
                    return this.neg().getNumBitsAbs();
                }
            }
            for (var A = this.high != 0 ? this.high : this.low, e = 31; e > 0 && (A & 1 << e) == 0; e--);
            if (this.high != 0) {
                return e + 33;
            } else {
                return e + 1;
            }
        };
        d.isZero = function () {
            return this.high === 0 && this.low === 0;
        };
        d.isNegative = function () {
            return !this.unsigned && this.high < 0;
        };
        d.isPositive = function () {
            return this.unsigned || this.high >= 0;
        };
        d.isOdd = function () {
            return (this.low & 1) == 1;
        };
        d.isEven = function () {
            return (this.low & 1) == 0;
        };
        d.equals = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            return (this.unsigned === A.unsigned || this.high >>> 31 != 1 || A.high >>> 31 != 1) && this.high === A.high && this.low === A.low;
        };
        d.eq = d.equals;
        d.notEquals = function (A) {
            return !this.eq(A);
        };
        d.neq = d.notEquals;
        d.lessThan = function (A) {
            return this.comp(A) < 0;
        };
        d.lt = d.lessThan;
        d.lessThanOrEqual = function (A) {
            return this.comp(A) <= 0;
        };
        d.lte = d.lessThanOrEqual;
        d.greaterThan = function (A) {
            return this.comp(A) > 0;
        };
        d.gt = d.greaterThan;
        d.greaterThanOrEqual = function (A) {
            return this.comp(A) >= 0;
        };
        d.gte = d.greaterThanOrEqual;
        d.compare = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            if (this.eq(A)) {
                return 0;
            }
            var t = this.isNegative();
            var i = A.isNegative();
            if (t && !i) {
                return -1;
            } else if (!t && i) {
                return 1;
            } else if (this.unsigned) {
                if (A.high >>> 0 > this.high >>> 0 || A.high === this.high && A.low >>> 0 > this.low >>> 0) {
                    return -1;
                } else {
                    return 1;
                }
            } else if (this.sub(A).isNegative()) {
                return -1;
            } else {
                return 1;
            }
        };
        d.comp = d.compare;
        d.negate = function () {
            if (!this.unsigned && this.eq(y)) {
                return y;
            } else {
                return this.not().add(u);
            }
        };
        d.neg = d.negate;
        d.add = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            var t = this.high >>> 16;
            var i = this.high & 65535;
            var r = this.low >>> 16;
            var n = this.low & 65535;
            var o = A.high >>> 16;
            var I = A.high & 65535;
            var f = A.low >>> 16;
            var a = 0;
            var h = 0;
            var B = 0;
            var C = 0;
            B += (C += n + (A.low & 65535)) >>> 16;
            h += (B += r + f) >>> 16;
            a += (h += i + I) >>> 16;
            a += t + o;
            return g((B &= 65535) << 16 | (C &= 65535), (a &= 65535) << 16 | (h &= 65535), this.unsigned);
        };
        d.subtract = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            return this.add(A.neg());
        };
        d.sub = d.subtract;
        d.multiply = function (A) {
            if (this.isZero()) {
                return C;
            }
            if (!e(A)) {
                A = s(A);
            }
            if (A.isZero()) {
                return C;
            }
            if (this.eq(y)) {
                if (A.isOdd()) {
                    return y;
                } else {
                    return C;
                }
            }
            if (A.eq(y)) {
                if (this.isOdd()) {
                    return y;
                } else {
                    return C;
                }
            }
            if (this.isNegative()) {
                if (A.isNegative()) {
                    return this.neg().mul(A.neg());
                } else {
                    return this.neg().mul(A).neg();
                }
            }
            if (A.isNegative()) {
                return this.mul(A.neg()).neg();
            }
            if (this.lt(B) && A.lt(B)) {
                return n(this.toNumber() * A.toNumber(), this.unsigned);
            }
            var t = this.high >>> 16;
            var i = this.high & 65535;
            var r = this.low >>> 16;
            var o = this.low & 65535;
            var I = A.high >>> 16;
            var f = A.high & 65535;
            var a = A.low >>> 16;
            var h = A.low & 65535;
            var E = 0;
            var u = 0;
            var Q = 0;
            var c = 0;
            Q += (c += o * h) >>> 16;
            u += (Q += r * h) >>> 16;
            Q &= 65535;
            u += (Q += o * a) >>> 16;
            E += (u += i * h) >>> 16;
            u &= 65535;
            E += (u += r * a) >>> 16;
            u &= 65535;
            E += (u += o * f) >>> 16;
            E += t * h + i * a + r * f + o * I;
            return g((Q &= 65535) << 16 | (c &= 65535), (E &= 65535) << 16 | (u &= 65535), this.unsigned);
        };
        d.mul = d.multiply;
        d.divide = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            if (A.isZero()) {
                throw Error("division by zero");
            }
            if (this.isZero()) {
                if (this.unsigned) {
                    return E;
                } else {
                    return C;
                }
            }
            var t;
            var i;
            var r;
            if (this.unsigned) {
                if (!A.unsigned) {
                    A = A.toUnsigned();
                }
                if (A.gt(this)) {
                    return E;
                }
                if (A.gt(this.shru(1))) {
                    return Q;
                }
                r = E;
            } else {
                if (this.eq(y)) {
                    if (A.eq(u) || A.eq(c)) {
                        return y;
                    } else if (A.eq(y)) {
                        return u;
                    } else if ((t = this.shr(1).div(A).shl(1)).eq(C)) {
                        if (A.isNegative()) {
                            return u;
                        } else {
                            return c;
                        }
                    } else {
                        i = this.sub(A.mul(t));
                        return r = t.add(i.div(A));
                    }
                }
                if (A.eq(y)) {
                    if (this.unsigned) {
                        return E;
                    } else {
                        return C;
                    }
                }
                if (this.isNegative()) {
                    if (A.isNegative()) {
                        return this.neg().div(A.neg());
                    } else {
                        return this.neg().div(A).neg();
                    }
                }
                if (A.isNegative()) {
                    return this.div(A.neg()).neg();
                }
                r = C;
            }
            for (i = this; i.gte(A);) {
                t = Math.max(1, Math.floor(i.toNumber() / A.toNumber()));
                for (var g = Math.ceil(Math.log(t) / Math.LN2), I = g <= 48 ? 1 : o(2, g - 48), f = n(t), a = f.mul(A); a.isNegative() || a.gt(i);) {
                    a = (f = n(t -= I, this.unsigned)).mul(A);
                }
                if (f.isZero()) {
                    f = u;
                }
                r = r.add(f);
                i = i.sub(a);
            }
            return r;
        };
        d.div = d.divide;
        d.modulo = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            return this.sub(this.div(A).mul(A));
        };
        d.mod = d.modulo;
        d.not = function () {
            return g(~this.low, ~this.high, this.unsigned);
        };
        d.and = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            return g(this.low & A.low, this.high & A.high, this.unsigned);
        };
        d.or = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            return g(this.low | A.low, this.high | A.high, this.unsigned);
        };
        d.xor = function (A) {
            if (!e(A)) {
                A = s(A);
            }
            return g(this.low ^ A.low, this.high ^ A.high, this.unsigned);
        };
        d.shiftLeft = function (A) {
            if (e(A)) {
                A = A.toInt();
            }
            if ((A &= 63) == 0) {
                return this;
            } else if (A < 32) {
                return g(this.low << A, this.high << A | this.low >>> 32 - A, this.unsigned);
            } else {
                return g(0, this.low << A - 32, this.unsigned);
            }
        };
        d.shl = d.shiftLeft;
        d.shiftRight = function (A) {
            if (e(A)) {
                A = A.toInt();
            }
            if ((A &= 63) == 0) {
                return this;
            } else if (A < 32) {
                return g(this.low >>> A | this.high << 32 - A, this.high >> A, this.unsigned);
            } else {
                return g(this.high >> A - 32, this.high >= 0 ? 0 : -1, this.unsigned);
            }
        };
        d.shr = d.shiftRight;
        d.shiftRightUnsigned = function (A) {
            if (e(A)) {
                A = A.toInt();
            }
            if ((A &= 63) == 0) {
                return this;
            }
            var t = this.high;
            if (A < 32) {
                return g(this.low >>> A | t << 32 - A, t >>> A, this.unsigned);
            } else {
                return g(A === 32 ? t : t >>> A - 32, 0, this.unsigned);
            }
        };
        d.shru = d.shiftRightUnsigned;
        d.toSigned = function () {
            if (this.unsigned) {
                return g(this.low, this.high, false);
            } else {
                return this;
            }
        };
        d.toUnsigned = function () {
            if (this.unsigned) {
                return this;
            } else {
                return g(this.low, this.high, true);
            }
        };
        d.toBytes = function (A) {
            if (A) {
                return this.toBytesLE();
            } else {
                return this.toBytesBE();
            }
        };
        d.toBytesLE = function () {
            var A = this.high;
            var e = this.low;
            return [e & 255, e >>> 8 & 255, e >>> 16 & 255, e >>> 24 & 255, A & 255, A >>> 8 & 255, A >>> 16 & 255, A >>> 24 & 255];
        };
        d.toBytesBE = function () {
            var A = this.high;
            var e = this.low;
            return [A >>> 24 & 255, A >>> 16 & 255, A >>> 8 & 255, A & 255, e >>> 24 & 255, e >>> 16 & 255, e >>> 8 & 255, e & 255];
        };
        return A;
    };
    if (typeof define == "function" && define.amd) {
        define([], fA);
    } else if (typeof require == "function" && typeof module == "object" && module && module.exports) {
        module.exports = fA();
    } else {
        (sA.dcodeIO = sA.dcodeIO || {}).Long = fA();
    }
    /**
     * @license ByteBuffer.js (c) 2013-2014 Daniel Wirtz <dcode@dcode.io>
     * This version of ByteBuffer.js uses an ArrayBuffer as its backing buffer which is accessed through a DataView and is
     * compatible with modern browsers.
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/ByteBuffer.js for details
     */
    (function (A) {
        "use strict";

        function e (A) {
            var e = function (A, t, i) {
                if (A === undefined) {
                    A = e.DEFAULT_CAPACITY;
                }
                if (t === undefined) {
                    t = e.DEFAULT_ENDIAN;
                }
                if (i === undefined) {
                    i = e.DEFAULT_NOASSERT;
                }
                if (!i) {
                    if ((A |= 0) < 0) {
                        throw RangeError("Illegal capacity");
                    }
                    t = !!t;
                    i = !!i;
                }
                this.buffer = A === 0 ? r : new ArrayBuffer(A);
                this.view = A === 0 ? null : new DataView(this.buffer);
                this.offset = 0;
                this.markedOffset = -1;
                this.limit = A;
                this.littleEndian = t !== undefined && !!t;
                this.noAssert = !!i;
            };
            e.VERSION = "3.5.5";
            e.LITTLE_ENDIAN = true;
            e.BIG_ENDIAN = false;
            e.DEFAULT_CAPACITY = 16;
            e.DEFAULT_ENDIAN = e.BIG_ENDIAN;
            e.DEFAULT_NOASSERT = false;
            e.Long = A || null;
            var t = e.prototype;
            var r = new ArrayBuffer(0);
            var n = String.fromCharCode;

            function g (A) {
                var e = 0;
                return function () {
                    if (e < A.length) {
                        return A.charCodeAt(e++);
                    } else {
                        return null;
                    }
                };
            }

            function o () {
                var A = [];
                var e = [];
                return function () {
                    if (arguments.length === 0) {
                        return e.join("") + n.apply(String, A);
                    }
                    if (A.length + arguments.length > 1024) {
                        e.push(n.apply(String, A));
                        A.length = 0;
                    }
                    Array.prototype.push.apply(A, arguments);
                };
            }
            e.allocate = function (A, t, i) {
                return new e(A, t, i);
            };
            e.concat = function (A, t, i, r) {
                if (!(typeof t != "boolean" && typeof t == "string")) {
                    r = i;
                    i = t;
                    t = undefined;
                }
                for (var n, g = 0, o = 0, I = A.length; o < I; ++o) {
                    if (!e.isByteBuffer(A[o])) {
                        A[o] = e.wrap(A[o], t);
                    }
                    if ((n = A[o].limit - A[o].offset) > 0) {
                        g += n;
                    }
                }
                if (g === 0) {
                    return new e(0, i, r);
                }
                var s;
                var f = new e(g, i, r);
                var a = new Uint8Array(f.buffer);
                for (o = 0; o < I;) {
                    if (!((n = (s = A[o++]).limit - s.offset) <= 0)) {
                        a.set(new Uint8Array(s.buffer).subarray(s.offset, s.limit), f.offset);
                        f.offset += n;
                    }
                }
                f.limit = f.offset;
                f.offset = 0;
                return f;
            };
            e.isByteBuffer = function (A) {
                return (A && A instanceof e) === true;
            };
            e.type = function () {
                return ArrayBuffer;
            };
            e.wrap = function (A, r, n, g) {
                if (typeof r != "string") {
                    g = n;
                    n = r;
                    r = undefined;
                }
                if (typeof A == "string") {
                    if (r === undefined) {
                        r = "utf8";
                    }
                    switch (r) {
                        case "base64":
                            return e.fromBase64(A, n);
                        case "hex":
                            return e.fromHex(A, n);
                        case "binary":
                            return e.fromBinary(A, n);
                        case "utf8":
                            return e.fromUTF8(A, n);
                        case "debug":
                            return e.fromDebug(A, n);
                        default:
                            throw Error("Unsupported encoding: " + r);
                    }
                }
                if (A === null || typeof A != "object") {
                    throw TypeError("Illegal buffer");
                }
                var o;
                if (e.isByteBuffer(A)) {
                    (o = t.clone.call(A)).markedOffset = -1;
                    return o;
                }
                if (A instanceof Uint8Array) {
                    o = new e(0, n, g);
                    if (A.length > 0) {
                        o.buffer = A.buffer;
                        o.offset = A.byteOffset;
                        o.limit = A.byteOffset + A.length;
                        o.view = A.length > 0 ? new DataView(A.buffer) : null;
                    }
                } else if (A instanceof ArrayBuffer) {
                    o = new e(0, n, g);
                    if (A.byteLength > 0) {
                        o.buffer = A;
                        o.offset = 0;
                        o.limit = A.byteLength;
                        o.view = A.byteLength > 0 ? new DataView(A) : null;
                    }
                } else {
                    if (Object.prototype.toString.call(A) !== "[object Array]") {
                        throw TypeError("Illegal buffer");
                    }
                    (o = new e(A.length, n, g)).limit = A.length;
                    i = 0;
                    for (; i < A.length; ++i) {
                        o.view.setUint8(i, A[i]);
                    }
                }
                return o;
            };
            t.writeInt8 = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal value: " + A + " (not an integer)");
                    }
                    A |= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                e += 1;
                var i = this.buffer.byteLength;
                if (e > i) {
                    this.resize((i *= 2) > e ? i : e);
                }
                e -= 1;
                this.view.setInt8(e, A);
                if (t) {
                    this.offset += 1;
                }
                return this;
            };
            t.writeByte = t.writeInt8;
            t.readInt8 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 1 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+1) <= " + this.buffer.byteLength);
                    }
                }
                var t = this.view.getInt8(A);
                if (e) {
                    this.offset += 1;
                }
                return t;
            };
            t.readByte = t.readInt8;
            t.writeUint8 = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal value: " + A + " (not an integer)");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                e += 1;
                var i = this.buffer.byteLength;
                if (e > i) {
                    this.resize((i *= 2) > e ? i : e);
                }
                e -= 1;
                this.view.setUint8(e, A);
                if (t) {
                    this.offset += 1;
                }
                return this;
            };
            t.readUint8 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 1 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+1) <= " + this.buffer.byteLength);
                    }
                }
                var t = this.view.getUint8(A);
                if (e) {
                    this.offset += 1;
                }
                return t;
            };
            t.writeInt16 = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal value: " + A + " (not an integer)");
                    }
                    A |= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                e += 2;
                var i = this.buffer.byteLength;
                if (e > i) {
                    this.resize((i *= 2) > e ? i : e);
                }
                e -= 2;
                this.view.setInt16(e, A, this.littleEndian);
                if (t) {
                    this.offset += 2;
                }
                return this;
            };
            t.writeShort = t.writeInt16;
            t.readInt16 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 2 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+2) <= " + this.buffer.byteLength);
                    }
                }
                var t = this.view.getInt16(A, this.littleEndian);
                if (e) {
                    this.offset += 2;
                }
                return t;
            };
            t.readShort = t.readInt16;
            t.writeUint16 = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal value: " + A + " (not an integer)");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                e += 2;
                var i = this.buffer.byteLength;
                if (e > i) {
                    this.resize((i *= 2) > e ? i : e);
                }
                e -= 2;
                this.view.setUint16(e, A, this.littleEndian);
                if (t) {
                    this.offset += 2;
                }
                return this;
            };
            t.readUint16 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 2 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+2) <= " + this.buffer.byteLength);
                    }
                }
                var t = this.view.getUint16(A, this.littleEndian);
                if (e) {
                    this.offset += 2;
                }
                return t;
            };
            t.writeInt32 = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal value: " + A + " (not an integer)");
                    }
                    A |= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                e += 4;
                var i = this.buffer.byteLength;
                if (e > i) {
                    this.resize((i *= 2) > e ? i : e);
                }
                e -= 4;
                this.view.setInt32(e, A, this.littleEndian);
                if (t) {
                    this.offset += 4;
                }
                return this;
            };
            t.writeInt = t.writeInt32;
            t.readInt32 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 4 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+4) <= " + this.buffer.byteLength);
                    }
                }
                var t = this.view.getInt32(A, this.littleEndian);
                if (e) {
                    this.offset += 4;
                }
                return t;
            };
            t.readInt = t.readInt32;
            t.writeUint32 = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal value: " + A + " (not an integer)");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                e += 4;
                var i = this.buffer.byteLength;
                if (e > i) {
                    this.resize((i *= 2) > e ? i : e);
                }
                e -= 4;
                this.view.setUint32(e, A, this.littleEndian);
                if (t) {
                    this.offset += 4;
                }
                return this;
            };
            t.readUint32 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 4 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+4) <= " + this.buffer.byteLength);
                    }
                }
                var t = this.view.getUint32(A, this.littleEndian);
                if (e) {
                    this.offset += 4;
                }
                return t;
            };
            if (A) {
                t.writeInt64 = function (e, t) {
                    var i = t === undefined;
                    if (i) {
                        t = this.offset;
                    }
                    if (!this.noAssert) {
                        if (typeof e == "number") {
                            e = A.fromNumber(e);
                        } else if (typeof e == "string") {
                            e = A.fromString(e);
                        } else if (!(e && e instanceof A)) {
                            throw TypeError("Illegal value: " + e + " (not an integer or Long)");
                        }
                        if (typeof t != "number" || t % 1 != 0) {
                            throw TypeError("Illegal offset: " + t + " (not an integer)");
                        }
                        if ((t >>>= 0) < 0 || t + 0 > this.buffer.byteLength) {
                            throw RangeError("Illegal offset: 0 <= " + t + " (+0) <= " + this.buffer.byteLength);
                        }
                    }
                    if (typeof e == "number") {
                        e = A.fromNumber(e);
                    } else if (typeof e == "string") {
                        e = A.fromString(e);
                    }
                    t += 8;
                    var r = this.buffer.byteLength;
                    if (t > r) {
                        this.resize((r *= 2) > t ? r : t);
                    }
                    t -= 8;
                    if (this.littleEndian) {
                        this.view.setInt32(t, e.low, true);
                        this.view.setInt32(t + 4, e.high, true);
                    } else {
                        this.view.setInt32(t, e.high, false);
                        this.view.setInt32(t + 4, e.low, false);
                    }
                    if (i) {
                        this.offset += 8;
                    }
                    return this;
                };
                t.writeLong = t.writeInt64;
                t.readInt64 = function (e) {
                    var t = e === undefined;
                    if (t) {
                        e = this.offset;
                    }
                    if (!this.noAssert) {
                        if (typeof e != "number" || e % 1 != 0) {
                            throw TypeError("Illegal offset: " + e + " (not an integer)");
                        }
                        if ((e >>>= 0) < 0 || e + 8 > this.buffer.byteLength) {
                            throw RangeError("Illegal offset: 0 <= " + e + " (+8) <= " + this.buffer.byteLength);
                        }
                    }
                    var i = this.littleEndian ? new A(this.view.getInt32(e, true), this.view.getInt32(e + 4, true), false) : new A(this.view.getInt32(e + 4, false), this.view.getInt32(e, false), false);
                    if (t) {
                        this.offset += 8;
                    }
                    return i;
                };
                t.readLong = t.readInt64;
                t.writeUint64 = function (e, t) {
                    var i = t === undefined;
                    if (i) {
                        t = this.offset;
                    }
                    if (!this.noAssert) {
                        if (typeof e == "number") {
                            e = A.fromNumber(e);
                        } else if (typeof e == "string") {
                            e = A.fromString(e);
                        } else if (!(e && e instanceof A)) {
                            throw TypeError("Illegal value: " + e + " (not an integer or Long)");
                        }
                        if (typeof t != "number" || t % 1 != 0) {
                            throw TypeError("Illegal offset: " + t + " (not an integer)");
                        }
                        if ((t >>>= 0) < 0 || t + 0 > this.buffer.byteLength) {
                            throw RangeError("Illegal offset: 0 <= " + t + " (+0) <= " + this.buffer.byteLength);
                        }
                    }
                    if (typeof e == "number") {
                        e = A.fromNumber(e);
                    } else if (typeof e == "string") {
                        e = A.fromString(e);
                    }
                    t += 8;
                    var r = this.buffer.byteLength;
                    if (t > r) {
                        this.resize((r *= 2) > t ? r : t);
                    }
                    t -= 8;
                    if (this.littleEndian) {
                        this.view.setInt32(t, e.low, true);
                        this.view.setInt32(t + 4, e.high, true);
                    } else {
                        this.view.setInt32(t, e.high, false);
                        this.view.setInt32(t + 4, e.low, false);
                    }
                    if (i) {
                        this.offset += 8;
                    }
                    return this;
                };
                t.readUint64 = function (e) {
                    var t = e === undefined;
                    if (t) {
                        e = this.offset;
                    }
                    if (!this.noAssert) {
                        if (typeof e != "number" || e % 1 != 0) {
                            throw TypeError("Illegal offset: " + e + " (not an integer)");
                        }
                        if ((e >>>= 0) < 0 || e + 8 > this.buffer.byteLength) {
                            throw RangeError("Illegal offset: 0 <= " + e + " (+8) <= " + this.buffer.byteLength);
                        }
                    }
                    var i = this.littleEndian ? new A(this.view.getInt32(e, true), this.view.getInt32(e + 4, true), true) : new A(this.view.getInt32(e + 4, false), this.view.getInt32(e, false), true);
                    if (t) {
                        this.offset += 8;
                    }
                    return i;
                };
            }
            t.writeFloat32 = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number") {
                        throw TypeError("Illegal value: " + A + " (not a number)");
                    }
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                e += 4;
                var i = this.buffer.byteLength;
                if (e > i) {
                    this.resize((i *= 2) > e ? i : e);
                }
                e -= 4;
                this.view.setFloat32(e, A, this.littleEndian);
                if (t) {
                    this.offset += 4;
                }
                return this;
            };
            t.writeFloat = t.writeFloat32;
            t.readFloat32 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 4 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+4) <= " + this.buffer.byteLength);
                    }
                }
                var t = this.view.getFloat32(A, this.littleEndian);
                if (e) {
                    this.offset += 4;
                }
                return t;
            };
            t.readFloat = t.readFloat32;
            t.writeFloat64 = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number") {
                        throw TypeError("Illegal value: " + A + " (not a number)");
                    }
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                e += 8;
                var i = this.buffer.byteLength;
                if (e > i) {
                    this.resize((i *= 2) > e ? i : e);
                }
                e -= 8;
                this.view.setFloat64(e, A, this.littleEndian);
                if (t) {
                    this.offset += 8;
                }
                return this;
            };
            t.writeDouble = t.writeFloat64;
            t.readFloat64 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 8 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+8) <= " + this.buffer.byteLength);
                    }
                }
                var t = this.view.getFloat64(A, this.littleEndian);
                if (e) {
                    this.offset += 8;
                }
                return t;
            };
            t.readDouble = t.readFloat64;
            e.MAX_VARINT32_BYTES = 5;
            e.calculateVarint32 = function (A) {
                if ((A >>>= 0) < 128) {
                    return 1;
                } else if (A < 16384) {
                    return 2;
                } else if (A < 1 << 21) {
                    return 3;
                } else if (A < 1 << 28) {
                    return 4;
                } else {
                    return 5;
                }
            };
            e.zigZagEncode32 = function (A) {
                return ((A |= 0) << 1 ^ A >> 31) >>> 0;
            };
            e.zigZagDecode32 = function (A) {
                return A >>> 1 ^ -(A & 1) | 0;
            };
            t.writeVarint32 = function (A, t) {
                var i = t === undefined;
                if (i) {
                    t = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal value: " + A + " (not an integer)");
                    }
                    A |= 0;
                    if (typeof t != "number" || t % 1 != 0) {
                        throw TypeError("Illegal offset: " + t + " (not an integer)");
                    }
                    if ((t >>>= 0) < 0 || t + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + t + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                var r;
                var n = e.calculateVarint32(A);
                t += n;
                var g = this.buffer.byteLength;
                if (t > g) {
                    this.resize((g *= 2) > t ? g : t);
                }
                t -= n;
                this.view.setUint8(t, r = A | 128);
                if ((A >>>= 0) >= 128) {
                    r = A >> 7 | 128;
                    this.view.setUint8(t + 1, r);
                    if (A >= 16384) {
                        r = A >> 14 | 128;
                        this.view.setUint8(t + 2, r);
                        if (A >= 1 << 21) {
                            r = A >> 21 | 128;
                            this.view.setUint8(t + 3, r);
                            if (A >= 1 << 28) {
                                this.view.setUint8(t + 4, A >> 28 & 15);
                                n = 5;
                            } else {
                                this.view.setUint8(t + 3, r & 127);
                                n = 4;
                            }
                        } else {
                            this.view.setUint8(t + 2, r & 127);
                            n = 3;
                        }
                    } else {
                        this.view.setUint8(t + 1, r & 127);
                        n = 2;
                    }
                } else {
                    this.view.setUint8(t, r & 127);
                    n = 1;
                }
                if (i) {
                    this.offset += n;
                    return this;
                } else {
                    return n;
                }
            };
            t.writeVarint32ZigZag = function (A, t) {
                return this.writeVarint32(e.zigZagEncode32(A), t);
            };
            t.readVarint32 = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 1 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+1) <= " + this.buffer.byteLength);
                    }
                }
                var t;
                var i;
                var r = 0;
                var n = 0;
                do {
                    i = A + r;
                    if (!this.noAssert && i > this.limit) {
                        var g = Error("Truncated");
                        g.truncated = true;
                        throw g;
                    }
                    t = this.view.getUint8(i);
                    if (r < 5) {
                        n |= (t & 127) << r * 7 >>> 0;
                    }
                    ++r;
                } while ((t & 128) == 128);
                n |= 0;
                if (e) {
                    this.offset += r;
                    return n;
                } else {
                    return {
                        value: n,
                        length: r
                    };
                }
            };
            t.readVarint32ZigZag = function (A) {
                var t = this.readVarint32(A);
                if (typeof t == "object") {
                    t.value = e.zigZagDecode32(t.value);
                } else {
                    t = e.zigZagDecode32(t);
                }
                return t;
            };
            if (A) {
                e.MAX_VARINT64_BYTES = 10;
                e.calculateVarint64 = function (e) {
                    if (typeof e == "number") {
                        e = A.fromNumber(e);
                    } else if (typeof e == "string") {
                        e = A.fromString(e);
                    }
                    var t = e.toInt() >>> 0;
                    var i = e.shiftRightUnsigned(28).toInt() >>> 0;
                    var r = e.shiftRightUnsigned(56).toInt() >>> 0;
                    if (r == 0) {
                        if (i == 0) {
                            if (t < 16384) {
                                if (t < 128) {
                                    return 1;
                                } else {
                                    return 2;
                                }
                            } else if (t < 1 << 21) {
                                return 3;
                            } else {
                                return 4;
                            }
                        } else if (i < 16384) {
                            if (i < 128) {
                                return 5;
                            } else {
                                return 6;
                            }
                        } else if (i < 1 << 21) {
                            return 7;
                        } else {
                            return 8;
                        }
                    } else if (r < 128) {
                        return 9;
                    } else {
                        return 10;
                    }
                };
                e.zigZagEncode64 = function (e) {
                    if (typeof e == "number") {
                        e = A.fromNumber(e, false);
                    } else if (typeof e == "string") {
                        e = A.fromString(e, false);
                    } else if (e.unsigned !== false) {
                        e = e.toSigned();
                    }
                    return e.shiftLeft(1).xor(e.shiftRight(63)).toUnsigned();
                };
                e.zigZagDecode64 = function (e) {
                    if (typeof e == "number") {
                        e = A.fromNumber(e, false);
                    } else if (typeof e == "string") {
                        e = A.fromString(e, false);
                    } else if (e.unsigned !== false) {
                        e = e.toSigned();
                    }
                    return e.shiftRightUnsigned(1).xor(e.and(A.ONE).toSigned().negate()).toSigned();
                };
                t.writeVarint64 = function (t, i) {
                    var r = i === undefined;
                    if (r) {
                        i = this.offset;
                    }
                    if (!this.noAssert) {
                        if (typeof t == "number") {
                            t = A.fromNumber(t);
                        } else if (typeof t == "string") {
                            t = A.fromString(t);
                        } else if (!(t && t instanceof A)) {
                            throw TypeError("Illegal value: " + t + " (not an integer or Long)");
                        }
                        if (typeof i != "number" || i % 1 != 0) {
                            throw TypeError("Illegal offset: " + i + " (not an integer)");
                        }
                        if ((i >>>= 0) < 0 || i + 0 > this.buffer.byteLength) {
                            throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength);
                        }
                    }
                    if (typeof t == "number") {
                        t = A.fromNumber(t, false);
                    } else if (typeof t == "string") {
                        t = A.fromString(t, false);
                    } else if (t.unsigned !== false) {
                        t = t.toSigned();
                    }
                    var n = e.calculateVarint64(t);
                    var g = t.toInt() >>> 0;
                    var o = t.shiftRightUnsigned(28).toInt() >>> 0;
                    var I = t.shiftRightUnsigned(56).toInt() >>> 0;
                    i += n;
                    var s = this.buffer.byteLength;
                    if (i > s) {
                        this.resize((s *= 2) > i ? s : i);
                    }
                    i -= n;
                    switch (n) {
                        case 10:
                            this.view.setUint8(i + 9, I >>> 7 & 1);
                        case 9:
                            this.view.setUint8(i + 8, n !== 9 ? I | 128 : I & 127);
                        case 8:
                            this.view.setUint8(i + 7, n !== 8 ? o >>> 21 | 128 : o >>> 21 & 127);
                        case 7:
                            this.view.setUint8(i + 6, n !== 7 ? o >>> 14 | 128 : o >>> 14 & 127);
                        case 6:
                            this.view.setUint8(i + 5, n !== 6 ? o >>> 7 | 128 : o >>> 7 & 127);
                        case 5:
                            this.view.setUint8(i + 4, n !== 5 ? o | 128 : o & 127);
                        case 4:
                            this.view.setUint8(i + 3, n !== 4 ? g >>> 21 | 128 : g >>> 21 & 127);
                        case 3:
                            this.view.setUint8(i + 2, n !== 3 ? g >>> 14 | 128 : g >>> 14 & 127);
                        case 2:
                            this.view.setUint8(i + 1, n !== 2 ? g >>> 7 | 128 : g >>> 7 & 127);
                        case 1:
                            this.view.setUint8(i, n !== 1 ? g | 128 : g & 127);
                    }
                    if (r) {
                        this.offset += n;
                        return this;
                    } else {
                        return n;
                    }
                };
                t.writeVarint64ZigZag = function (A, t) {
                    return this.writeVarint64(e.zigZagEncode64(A), t);
                };
                t.readVarint64 = function (e) {
                    var t = e === undefined;
                    if (t) {
                        e = this.offset;
                    }
                    if (!this.noAssert) {
                        if (typeof e != "number" || e % 1 != 0) {
                            throw TypeError("Illegal offset: " + e + " (not an integer)");
                        }
                        if ((e >>>= 0) < 0 || e + 1 > this.buffer.byteLength) {
                            throw RangeError("Illegal offset: 0 <= " + e + " (+1) <= " + this.buffer.byteLength);
                        }
                    }
                    var i = e;
                    var r = 0;
                    var n = 0;
                    var g = 0;
                    var o = 0;
                    r = (o = this.view.getUint8(e++)) & 127;
                    if (o & 128 && (r |= ((o = this.view.getUint8(e++)) & 127) << 7, o & 128 && (r |= ((o = this.view.getUint8(e++)) & 127) << 14, o & 128 && (r |= ((o = this.view.getUint8(e++)) & 127) << 21, o & 128 && (n = (o = this.view.getUint8(e++)) & 127, o & 128 && (n |= ((o = this.view.getUint8(e++)) & 127) << 7, o & 128 && (n |= ((o = this.view.getUint8(e++)) & 127) << 14, o & 128 && (n |= ((o = this.view.getUint8(e++)) & 127) << 21, o & 128 && (g = (o = this.view.getUint8(e++)) & 127, o & 128 && (g |= ((o = this.view.getUint8(e++)) & 127) << 7, o & 128)))))))))) {
                        throw Error("Buffer overrun");
                    }
                    var I = A.fromBits(r | n << 28, n >>> 4 | g << 24, false);
                    if (t) {
                        this.offset = e;
                        return I;
                    } else {
                        return {
                            value: I,
                            length: e - i
                        };
                    }
                };
                t.readVarint64ZigZag = function (t) {
                    var i = this.readVarint64(t);
                    if (i && i.value instanceof A) {
                        i.value = e.zigZagDecode64(i.value);
                    } else {
                        i = e.zigZagDecode64(i);
                    }
                    return i;
                };
            }
            t.writeCString = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                var i;
                var r = A.length;
                if (!this.noAssert) {
                    if (typeof A != "string") {
                        throw TypeError("Illegal str: Not a string");
                    }
                    for (i = 0; i < r; ++i) {
                        if (A.charCodeAt(i) === 0) {
                            throw RangeError("Illegal str: Contains NULL-characters");
                        }
                    }
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                r = s.calculateUTF16asUTF8(g(A))[1];
                e += r + 1;
                var n = this.buffer.byteLength;
                if (e > n) {
                    this.resize((n *= 2) > e ? n : e);
                }
                e -= r + 1;
                s.encodeUTF16toUTF8(g(A), function (A) {
                    this.view.setUint8(e++, A);
                }.bind(this));
                this.view.setUint8(e++, 0);
                if (t) {
                    this.offset = e;
                    return this;
                } else {
                    return r;
                }
            };
            t.readCString = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 1 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+1) <= " + this.buffer.byteLength);
                    }
                }
                var t;
                var i = A;
                var r = -1;
                s.decodeUTF8toUTF16(function () {
                    if (r === 0) {
                        return null;
                    }
                    if (A >= this.limit) {
                        throw RangeError("Illegal range: Truncated data, " + A + " < " + this.limit);
                    }
                    if ((r = this.view.getUint8(A++)) === 0) {
                        return null;
                    } else {
                        return r;
                    }
                }.bind(this), t = o(), true);
                if (e) {
                    this.offset = A;
                    return t();
                } else {
                    return {
                        string: t(),
                        length: A - i
                    };
                }
            };
            t.writeIString = function (A, e) {
                var t = e === undefined;
                if (t) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "string") {
                        throw TypeError("Illegal str: Not a string");
                    }
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                var i;
                var r = e;
                i = s.calculateUTF16asUTF8(g(A), this.noAssert)[1];
                e += 4 + i;
                var n = this.buffer.byteLength;
                if (e > n) {
                    this.resize((n *= 2) > e ? n : e);
                }
                e -= 4 + i;
                this.view.setUint32(e, i, this.littleEndian);
                e += 4;
                s.encodeUTF16toUTF8(g(A), function (A) {
                    this.view.setUint8(e++, A);
                }.bind(this));
                if (e !== r + 4 + i) {
                    throw RangeError("Illegal range: Truncated data, " + e + " == " + (e + 4 + i));
                }
                if (t) {
                    this.offset = e;
                    return this;
                } else {
                    return e - r;
                }
            };
            t.readIString = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 4 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+4) <= " + this.buffer.byteLength);
                    }
                }
                var t;
                var i;
                var r = A;
                t = this.view.getUint32(A, this.littleEndian);
                var n;
                var g = (A += 4) + t;
                s.decodeUTF8toUTF16(function () {
                    if (A < g) {
                        return this.view.getUint8(A++);
                    } else {
                        return null;
                    }
                }.bind(this), n = o(), this.noAssert);
                i = n();
                if (e) {
                    this.offset = A;
                    return i;
                } else {
                    return {
                        string: i,
                        length: A - r
                    };
                }
            };
            e.METRICS_CHARS = "c";
            e.METRICS_BYTES = "b";
            t.writeUTF8String = function (A, e) {
                var t;
                var i = e === undefined;
                if (i) {
                    e = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: " + e + " (not an integer)");
                    }
                    if ((e >>>= 0) < 0 || e + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + e + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                var r = e;
                t = s.calculateUTF16asUTF8(g(A))[1];
                e += t;
                var n = this.buffer.byteLength;
                if (e > n) {
                    this.resize((n *= 2) > e ? n : e);
                }
                e -= t;
                s.encodeUTF16toUTF8(g(A), function (A) {
                    this.view.setUint8(e++, A);
                }.bind(this));
                if (i) {
                    this.offset = e;
                    return this;
                } else {
                    return e - r;
                }
            };
            t.writeString = t.writeUTF8String;
            e.calculateUTF8Chars = function (A) {
                return s.calculateUTF16asUTF8(g(A))[0];
            };
            e.calculateUTF8Bytes = function (A) {
                return s.calculateUTF16asUTF8(g(A))[1];
            };
            t.readUTF8String = function (A, t, i) {
                if (typeof t == "number") {
                    i = t;
                    t = undefined;
                }
                var r = i === undefined;
                if (r) {
                    i = this.offset;
                }
                if (t === undefined) {
                    t = e.METRICS_CHARS;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal length: " + A + " (not an integer)");
                    }
                    A |= 0;
                    if (typeof i != "number" || i % 1 != 0) {
                        throw TypeError("Illegal offset: " + i + " (not an integer)");
                    }
                    if ((i >>>= 0) < 0 || i + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                var n;
                var g = 0;
                var I = i;
                if (t === e.METRICS_CHARS) {
                    n = o();
                    s.decodeUTF8(function () {
                        if (g < A && i < this.limit) {
                            return this.view.getUint8(i++);
                        } else {
                            return null;
                        }
                    }.bind(this), function (A) {
                        ++g;
                        s.UTF8toUTF16(A, n);
                    }.bind(this));
                    if (g !== A) {
                        throw RangeError("Illegal range: Truncated data, " + g + " == " + A);
                    }
                    if (r) {
                        this.offset = i;
                        return n();
                    } else {
                        return {
                            string: n(),
                            length: i - I
                        };
                    }
                }
                if (t === e.METRICS_BYTES) {
                    if (!this.noAssert) {
                        if (typeof i != "number" || i % 1 != 0) {
                            throw TypeError("Illegal offset: " + i + " (not an integer)");
                        }
                        if ((i >>>= 0) < 0 || i + A > this.buffer.byteLength) {
                            throw RangeError("Illegal offset: 0 <= " + i + " (+" + A + ") <= " + this.buffer.byteLength);
                        }
                    }
                    var f = i + A;
                    s.decodeUTF8toUTF16(function () {
                        if (i < f) {
                            return this.view.getUint8(i++);
                        } else {
                            return null;
                        }
                    }.bind(this), n = o(), this.noAssert);
                    if (i !== f) {
                        throw RangeError("Illegal range: Truncated data, " + i + " == " + f);
                    }
                    if (r) {
                        this.offset = i;
                        return n();
                    } else {
                        return {
                            string: n(),
                            length: i - I
                        };
                    }
                }
                throw TypeError("Unsupported metrics: " + t);
            };
            t.readString = t.readUTF8String;
            t.writeVString = function (A, t) {
                var i = t === undefined;
                if (i) {
                    t = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "string") {
                        throw TypeError("Illegal str: Not a string");
                    }
                    if (typeof t != "number" || t % 1 != 0) {
                        throw TypeError("Illegal offset: " + t + " (not an integer)");
                    }
                    if ((t >>>= 0) < 0 || t + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + t + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                var r;
                var n;
                var o = t;
                r = s.calculateUTF16asUTF8(g(A), this.noAssert)[1];
                n = e.calculateVarint32(r);
                t += n + r;
                var I = this.buffer.byteLength;
                if (t > I) {
                    this.resize((I *= 2) > t ? I : t);
                }
                t -= n + r;
                t += this.writeVarint32(r, t);
                s.encodeUTF16toUTF8(g(A), function (A) {
                    this.view.setUint8(t++, A);
                }.bind(this));
                if (t !== o + r + n) {
                    throw RangeError("Illegal range: Truncated data, " + t + " == " + (t + r + n));
                }
                if (i) {
                    this.offset = t;
                    return this;
                } else {
                    return t - o;
                }
            };
            t.readVString = function (A) {
                var e = A === undefined;
                if (e) {
                    A = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 1 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+1) <= " + this.buffer.byteLength);
                    }
                }
                var t;
                var i = this.readVarint32(A);
                var r = A;
                A += i.length;
                i = i.value;
                var n = A + i;
                var g = o();
                s.decodeUTF8toUTF16(function () {
                    if (A < n) {
                        return this.view.getUint8(A++);
                    } else {
                        return null;
                    }
                }.bind(this), g, this.noAssert);
                t = g();
                if (e) {
                    this.offset = A;
                    return t;
                } else {
                    return {
                        string: t,
                        length: A - r
                    };
                }
            };
            t.append = function (A, t, i) {
                if (!(typeof t != "number" && typeof t == "string")) {
                    i = t;
                    t = undefined;
                }
                var r = i === undefined;
                if (r) {
                    i = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof i != "number" || i % 1 != 0) {
                        throw TypeError("Illegal offset: " + i + " (not an integer)");
                    }
                    if ((i >>>= 0) < 0 || i + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                if (!(A instanceof e)) {
                    A = e.wrap(A, t);
                }
                var n = A.limit - A.offset;
                if (n <= 0) {
                    return this;
                }
                i += n;
                var g = this.buffer.byteLength;
                if (i > g) {
                    this.resize((g *= 2) > i ? g : i);
                }
                i -= n;
                new Uint8Array(this.buffer, i).set(new Uint8Array(A.buffer).subarray(A.offset, A.limit));
                A.offset += n;
                if (r) {
                    this.offset += n;
                }
                return this;
            };
            t.appendTo = function (A, e) {
                A.append(this, e);
                return this;
            };
            t.assert = function (A) {
                this.noAssert = !A;
                return this;
            };
            t.capacity = function () {
                return this.buffer.byteLength;
            };
            t.clear = function () {
                this.offset = 0;
                this.limit = this.buffer.byteLength;
                this.markedOffset = -1;
                return this;
            };
            t.clone = function (A) {
                var t = new e(0, this.littleEndian, this.noAssert);
                if (A) {
                    var i = new ArrayBuffer(this.buffer.byteLength);
                    new Uint8Array(i).set(this.buffer);
                    t.buffer = i;
                    t.view = new DataView(i);
                } else {
                    t.buffer = this.buffer;
                    t.view = this.view;
                }
                t.offset = this.offset;
                t.markedOffset = this.markedOffset;
                t.limit = this.limit;
                return t;
            };
            t.compact = function (A, e) {
                if (A === undefined) {
                    A = this.offset;
                }
                if (e === undefined) {
                    e = this.limit;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    e >>>= 0;
                    if (A < 0 || A > e || e > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + A + " <= " + e + " <= " + this.buffer.byteLength);
                    }
                }
                if (A === 0 && e === this.buffer.byteLength) {
                    return this;
                }
                var t = e - A;
                if (t === 0) {
                    this.buffer = r;
                    this.view = null;
                    if (this.markedOffset >= 0) {
                        this.markedOffset -= A;
                    }
                    this.offset = 0;
                    this.limit = 0;
                    return this;
                }
                var i = new ArrayBuffer(t);
                new Uint8Array(i).set(new Uint8Array(this.buffer).subarray(A, e));
                this.buffer = i;
                this.view = new DataView(i);
                if (this.markedOffset >= 0) {
                    this.markedOffset -= A;
                }
                this.offset = 0;
                this.limit = t;
                return this;
            };
            t.copy = function (A, t) {
                if (A === undefined) {
                    A = this.offset;
                }
                if (t === undefined) {
                    t = this.limit;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    A >>>= 0;
                    if (typeof t != "number" || t % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    t >>>= 0;
                    if (A < 0 || A > t || t > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + A + " <= " + t + " <= " + this.buffer.byteLength);
                    }
                }
                if (A === t) {
                    return new e(0, this.littleEndian, this.noAssert);
                }
                var i = t - A;
                var r = new e(i, this.littleEndian, this.noAssert);
                r.offset = 0;
                r.limit = i;
                if (r.markedOffset >= 0) {
                    r.markedOffset -= A;
                }
                this.copyTo(r, 0, A, t);
                return r;
            };
            t.copyTo = function (A, t, i, r) {
                var n;
                var g;
                if (!this.noAssert && !e.isByteBuffer(A)) {
                    throw TypeError("Illegal target: Not a ByteBuffer");
                }
                t = (g = t === undefined) ? A.offset : t | 0;
                i = (n = i === undefined) ? this.offset : i | 0;
                r = r === undefined ? this.limit : r | 0;
                if (t < 0 || t > A.buffer.byteLength) {
                    throw RangeError("Illegal target range: 0 <= " + t + " <= " + A.buffer.byteLength);
                }
                if (i < 0 || r > this.buffer.byteLength) {
                    throw RangeError("Illegal source range: 0 <= " + i + " <= " + this.buffer.byteLength);
                }
                var o = r - i;
                if (o === 0) {
                    return A;
                } else {
                    A.ensureCapacity(t + o);
                    new Uint8Array(A.buffer).set(new Uint8Array(this.buffer).subarray(i, r), t);
                    if (n) {
                        this.offset += o;
                    }
                    if (g) {
                        A.offset += o;
                    }
                    return this;
                }
            };
            t.ensureCapacity = function (A) {
                var e = this.buffer.byteLength;
                if (e < A) {
                    return this.resize((e *= 2) > A ? e : A);
                } else {
                    return this;
                }
            };
            t.fill = function (A, e, t) {
                var i = e === undefined;
                if (i) {
                    e = this.offset;
                }
                if (typeof A == "string" && A.length > 0) {
                    A = A.charCodeAt(0);
                }
                if (e === undefined) {
                    e = this.offset;
                }
                if (t === undefined) {
                    t = this.limit;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal value: " + A + " (not an integer)");
                    }
                    A |= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    e >>>= 0;
                    if (typeof t != "number" || t % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    t >>>= 0;
                    if (e < 0 || e > t || t > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + e + " <= " + t + " <= " + this.buffer.byteLength);
                    }
                }
                if (e >= t) {
                    return this;
                }
                for (; e < t;) {
                    this.view.setUint8(e++, A);
                }
                if (i) {
                    this.offset = e;
                }
                return this;
            };
            t.flip = function () {
                this.limit = this.offset;
                this.offset = 0;
                return this;
            };
            t.mark = function (A) {
                A = A === undefined ? this.offset : A;
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal offset: " + A + " (not an integer)");
                    }
                    if ((A >>>= 0) < 0 || A + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + A + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                this.markedOffset = A;
                return this;
            };
            t.order = function (A) {
                if (!this.noAssert && typeof A != "boolean") {
                    throw TypeError("Illegal littleEndian: Not a boolean");
                }
                this.littleEndian = !!A;
                return this;
            };
            t.LE = function (A) {
                this.littleEndian = A === undefined || !!A;
                return this;
            };
            t.BE = function (A) {
                this.littleEndian = A !== undefined && !A;
                return this;
            };
            t.prepend = function (A, t, i) {
                if (!(typeof t != "number" && typeof t == "string")) {
                    i = t;
                    t = undefined;
                }
                var r = i === undefined;
                if (r) {
                    i = this.offset;
                }
                if (!this.noAssert) {
                    if (typeof i != "number" || i % 1 != 0) {
                        throw TypeError("Illegal offset: " + i + " (not an integer)");
                    }
                    if ((i >>>= 0) < 0 || i + 0 > this.buffer.byteLength) {
                        throw RangeError("Illegal offset: 0 <= " + i + " (+0) <= " + this.buffer.byteLength);
                    }
                }
                if (!(A instanceof e)) {
                    A = e.wrap(A, t);
                }
                var n = A.limit - A.offset;
                if (n <= 0) {
                    return this;
                }
                var g;
                var o = n - i;
                if (o > 0) {
                    var I = new ArrayBuffer(this.buffer.byteLength + o);
                    (g = new Uint8Array(I)).set(new Uint8Array(this.buffer).subarray(i, this.buffer.byteLength), n);
                    this.buffer = I;
                    this.view = new DataView(I);
                    this.offset += o;
                    if (this.markedOffset >= 0) {
                        this.markedOffset += o;
                    }
                    this.limit += o;
                    i += o;
                } else {
                    g = new Uint8Array(this.buffer);
                }
                g.set(new Uint8Array(A.buffer).subarray(A.offset, A.limit), i - n);
                A.offset = A.limit;
                if (r) {
                    this.offset -= n;
                }
                return this;
            };
            t.prependTo = function (A, e) {
                A.prepend(this, e);
                return this;
            };
            t.printDebug = function (A) {
                if (typeof A != "function") {
                    A = console.log.bind(console);
                }
                A(this.toString() + "\n-------------------------------------------------------------------\n" + this.toDebug(true));
            };
            t.remaining = function () {
                return this.limit - this.offset;
            };
            t.reset = function () {
                if (this.markedOffset >= 0) {
                    this.offset = this.markedOffset;
                    this.markedOffset = -1;
                } else {
                    this.offset = 0;
                }
                return this;
            };
            t.resize = function (A) {
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal capacity: " + A + " (not an integer)");
                    }
                    if ((A |= 0) < 0) {
                        throw RangeError("Illegal capacity: 0 <= " + A);
                    }
                }
                if (this.buffer.byteLength < A) {
                    var e = new ArrayBuffer(A);
                    new Uint8Array(e).set(new Uint8Array(this.buffer));
                    this.buffer = e;
                    this.view = new DataView(e);
                }
                return this;
            };
            t.reverse = function (A, e) {
                if (A === undefined) {
                    A = this.offset;
                }
                if (e === undefined) {
                    e = this.limit;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    e >>>= 0;
                    if (A < 0 || A > e || e > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + A + " <= " + e + " <= " + this.buffer.byteLength);
                    }
                }
                if (!(A === e)) {
                    Array.prototype.reverse.call(new Uint8Array(this.buffer).subarray(A, e));
                    this.view = new DataView(this.buffer);
                }
                return this;
            };
            t.skip = function (A) {
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal length: " + A + " (not an integer)");
                    }
                    A |= 0;
                }
                var e = this.offset + A;
                if (!this.noAssert && (e < 0 || e > this.buffer.byteLength)) {
                    throw RangeError("Illegal length: 0 <= " + this.offset + " + " + A + " <= " + this.buffer.byteLength);
                }
                this.offset = e;
                return this;
            };
            t.slice = function (A, e) {
                if (A === undefined) {
                    A = this.offset;
                }
                if (e === undefined) {
                    e = this.limit;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    e >>>= 0;
                    if (A < 0 || A > e || e > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + A + " <= " + e + " <= " + this.buffer.byteLength);
                    }
                }
                var t = this.clone();
                t.offset = A;
                t.limit = e;
                return t;
            };
            t.toBuffer = function (A) {
                var e = this.offset;
                var t = this.limit;
                if (e > t) {
                    var i = e;
                    e = t;
                    t = i;
                }
                if (!this.noAssert) {
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal offset: Not an integer");
                    }
                    e >>>= 0;
                    if (typeof t != "number" || t % 1 != 0) {
                        throw TypeError("Illegal limit: Not an integer");
                    }
                    t >>>= 0;
                    if (e < 0 || e > t || t > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + e + " <= " + t + " <= " + this.buffer.byteLength);
                    }
                }
                if (!A && e === 0 && t === this.buffer.byteLength) {
                    return this.buffer;
                }
                if (e === t) {
                    return r;
                }
                var n = new ArrayBuffer(t - e);
                new Uint8Array(n).set(new Uint8Array(this.buffer).subarray(e, t), 0);
                return n;
            };
            t.toArrayBuffer = t.toBuffer;
            t.toString = function (A, e, t) {
                if (A === undefined) {
                    return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
                }
                if (typeof A == "number") {
                    t = e = A = "utf8";
                }
                switch (A) {
                    case "utf8":
                        return this.toUTF8(e, t);
                    case "base64":
                        return this.toBase64(e, t);
                    case "hex":
                        return this.toHex(e, t);
                    case "binary":
                        return this.toBinary(e, t);
                    case "debug":
                        return this.toDebug();
                    case "columns":
                        return this.toColumns();
                    default:
                        throw Error("Unsupported encoding: " + A);
                }
            };
            var I = function () {
                for (var A = {}, e = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47], t = [], i = 0, r = e.length; i < r; ++i) {
                    t[e[i]] = i;
                }
                A.encode = function (A, t) {
                    for (var i, r;
                        (i = A()) !== null;) {
                        t(e[i >> 2 & 63]);
                        r = (i & 3) << 4;
                        if ((i = A()) !== null) {
                            t(e[((r |= i >> 4 & 15) | i >> 4 & 15) & 63]);
                            r = (i & 15) << 2;
                            if ((i = A()) !== null) {
                                t(e[(r | i >> 6 & 3) & 63]);
                                t(e[i & 63]);
                            } else {
                                t(e[r & 63]);
                                t(61);
                            }
                        } else {
                            t(e[r & 63]);
                            t(61);
                            t(61);
                        }
                    }
                };
                A.decode = function (A, e) {
                    var i;
                    var r;
                    var n;

                    function g (A) {
                        throw Error("Illegal character code: " + A);
                    }
                    for (;
                        (i = A()) !== null;) {
                        if ((r = t[i]) === undefined) {
                            g(i);
                        }
                        if ((i = A()) !== null && ((n = t[i]) === undefined && g(i), e(r << 2 >>> 0 | (n & 48) >> 4), (i = A()) !== null)) {
                            if ((r = t[i]) === undefined) {
                                if (i === 61) {
                                    break;
                                }
                                g(i);
                            }
                            e((n & 15) << 4 >>> 0 | (r & 60) >> 2);
                            if ((i = A()) !== null) {
                                if ((n = t[i]) === undefined) {
                                    if (i === 61) {
                                        break;
                                    }
                                    g(i);
                                }
                                e((r & 3) << 6 >>> 0 | n);
                            }
                        }
                    }
                };
                A.test = function (A) {
                    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(A);
                };
                return A;
            }();
            t.toBase64 = function (A, e) {
                if (A === undefined) {
                    A = this.offset;
                }
                if (e === undefined) {
                    e = this.limit;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    e >>>= 0;
                    if (A < 0 || A > e || e > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + A + " <= " + e + " <= " + this.buffer.byteLength);
                    }
                }
                var t;
                I.encode(function () {
                    if (A < e) {
                        return this.view.getUint8(A++);
                    } else {
                        return null;
                    }
                }.bind(this), t = o());
                return t();
            };
            e.fromBase64 = function (A, t, i) {
                if (!i) {
                    if (typeof A != "string") {
                        throw TypeError("Illegal str: Not a string");
                    }
                    if (A.length % 4 != 0) {
                        throw TypeError("Illegal str: Length not a multiple of 4");
                    }
                }
                var r = new e(A.length / 4 * 3, t, i);
                var n = 0;
                I.decode(g(A), function (A) {
                    r.view.setUint8(n++, A);
                });
                r.limit = n;
                return r;
            };
            e.btoa = function (A) {
                return e.fromBinary(A).toBase64();
            };
            e.atob = function (A) {
                return e.fromBase64(A).toBinary();
            };
            t.toBinary = function (A, e) {
                A = A === undefined ? this.offset : A;
                e = e === undefined ? this.limit : e;
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    e >>>= 0;
                    if (A < 0 || A > e || e > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + A + " <= " + e + " <= " + this.buffer.byteLength);
                    }
                }
                if (A === e) {
                    return "";
                }
                for (var t = [], i = []; A < e;) {
                    t.push(this.view.getUint8(A++));
                    if (t.length >= 1024) {
                        i.push(String.fromCharCode.apply(String, t));
                        t = [];
                    }
                }
                return i.join("") + String.fromCharCode.apply(String, t);
            };
            e.fromBinary = function (A, t, i) {
                if (!i && typeof A != "string") {
                    throw TypeError("Illegal str: Not a string");
                }
                for (var r, n = 0, g = A.length, o = new e(g, t, i); n < g;) {
                    r = A.charCodeAt(n);
                    if (!i && r > 255) {
                        throw RangeError("Illegal charCode at " + n + ": 0 <= " + r + " <= 255");
                    }
                    o.view.setUint8(n++, r);
                }
                o.limit = g;
                return o;
            };
            t.toDebug = function (A) {
                for (var e, t = -1, i = this.buffer.byteLength, r = "", n = "", g = ""; t < i;) {
                    if (t !== -1) {
                        r += (e = this.view.getUint8(t)) < 16 ? "0" + e.toString(16).toUpperCase() : e.toString(16).toUpperCase();
                        if (A) {
                            n += e > 32 && e < 127 ? String.fromCharCode(e) : ".";
                        }
                    }
                    ++t;
                    if (A && t > 0 && t % 16 == 0 && t !== i) {
                        for (; r.length < 51;) {
                            r += " ";
                        }
                        g += r + n + "\n";
                        r = n = "";
                    }
                    if (t === this.offset && t === this.limit) {
                        r += t === this.markedOffset ? "!" : "|";
                    } else if (t === this.offset) {
                        r += t === this.markedOffset ? "[" : "<";
                    } else if (t === this.limit) {
                        r += t === this.markedOffset ? "]" : ">";
                    } else {
                        r += t === this.markedOffset ? "'" : A || t !== 0 && t !== i ? " " : "";
                    }
                }
                if (A && r !== " ") {
                    for (; r.length < 51;) {
                        r += " ";
                    }
                    g += r + n + "\n";
                }
                if (A) {
                    return g;
                } else {
                    return r;
                }
            };
            e.fromDebug = function (A, t, i) {
                for (var r, n, g = A.length, o = new e((g + 1) / 3 | 0, t, i), I = 0, s = 0, f = false, a = false, h = false, B = false, C = false; I < g;) {
                    switch (r = A.charAt(I++)) {
                        case "!":
                            if (!i) {
                                if (a || h || B) {
                                    C = true;
                                    break;
                                }
                                a = h = B = true;
                            }
                            o.offset = o.markedOffset = o.limit = s;
                            f = false;
                            break;
                        case "|":
                            if (!i) {
                                if (a || B) {
                                    C = true;
                                    break;
                                }
                                a = B = true;
                            }
                            o.offset = o.limit = s;
                            f = false;
                            break;
                        case "[":
                            if (!i) {
                                if (a || h) {
                                    C = true;
                                    break;
                                }
                                a = h = true;
                            }
                            o.offset = o.markedOffset = s;
                            f = false;
                            break;
                        case "<":
                            if (!i) {
                                if (a) {
                                    C = true;
                                    break;
                                }
                                a = true;
                            }
                            o.offset = s;
                            f = false;
                            break;
                        case "]":
                            if (!i) {
                                if (B || h) {
                                    C = true;
                                    break;
                                }
                                B = h = true;
                            }
                            o.limit = o.markedOffset = s;
                            f = false;
                            break;
                        case ">":
                            if (!i) {
                                if (B) {
                                    C = true;
                                    break;
                                }
                                B = true;
                            }
                            o.limit = s;
                            f = false;
                            break;
                        case "'":
                            if (!i) {
                                if (h) {
                                    C = true;
                                    break;
                                }
                                h = true;
                            }
                            o.markedOffset = s;
                            f = false;
                            break;
                        case " ":
                            f = false;
                            break;
                        default:
                            if (!i && f) {
                                C = true;
                                break;
                            }
                            n = parseInt(r + A.charAt(I++), 16);
                            if (!i && (isNaN(n) || n < 0 || n > 255)) {
                                throw TypeError("Illegal str: Not a debug encoded string");
                            }
                            o.view.setUint8(s++, n);
                            f = true;
                    }
                    if (C) {
                        throw TypeError("Illegal str: Invalid symbol at " + I);
                    }
                }
                if (!i) {
                    if (!a || !B) {
                        throw TypeError("Illegal str: Missing offset or limit");
                    }
                    if (s < o.buffer.byteLength) {
                        throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + s + " < " + g);
                    }
                }
                return o;
            };
            t.toHex = function (A, e) {
                A = A === undefined ? this.offset : A;
                e = e === undefined ? this.limit : e;
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    e >>>= 0;
                    if (A < 0 || A > e || e > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + A + " <= " + e + " <= " + this.buffer.byteLength);
                    }
                }
                for (var t, i = new Array(e - A); A < e;) {
                    if ((t = this.view.getUint8(A++)) < 16) {
                        i.push("0", t.toString(16));
                    } else {
                        i.push(t.toString(16));
                    }
                }
                return i.join("");
            };
            e.fromHex = function (A, t, i) {
                if (!i) {
                    if (typeof A != "string") {
                        throw TypeError("Illegal str: Not a string");
                    }
                    if (A.length % 2 != 0) {
                        throw TypeError("Illegal str: Length not a multiple of 2");
                    }
                }
                for (var r, n = A.length, g = new e(n / 2 | 0, t), o = 0, I = 0; o < n; o += 2) {
                    r = parseInt(A.substring(o, o + 2), 16);
                    if (!i && (!isFinite(r) || r < 0 || r > 255)) {
                        throw TypeError("Illegal str: Contains non-hex characters");
                    }
                    g.view.setUint8(I++, r);
                }
                g.limit = I;
                return g;
            };
            var s = function () {
                var A = {
                    MAX_CODEPOINT: 1114111,
                    encodeUTF8: function (A, e) {
                        var t = null;
                        for (typeof A == "number" && (t = A, A = function () {
                                return null;
                            }); t !== null || (t = A()) !== null;) {
                            if (t < 128) {
                                e(t & 127);
                            } else if (t < 2048) {
                                e(t >> 6 & 31 | 192);
                                e(t & 63 | 128);
                            } else if (t < 65536) {
                                e(t >> 12 & 15 | 224);
                                e(t >> 6 & 63 | 128);
                                e(t & 63 | 128);
                            } else {
                                e(t >> 18 & 7 | 240);
                                e(t >> 12 & 63 | 128);
                                e(t >> 6 & 63 | 128);
                                e(t & 63 | 128);
                            }
                            t = null;
                        }
                    },
                    decodeUTF8: function (A, e) {
                        for (var t, i, r, n, g = function (A) {
                                A = A.slice(0, A.indexOf(null));
                                var e = Error(A.toString());
                                e.name = "TruncatedError";
                                e.bytes = A;
                                throw e;
                            };
                            (t = A()) !== null;) {
                            if ((t & 128) == 0) {
                                e(t);
                            } else if ((t & 224) == 192) {
                                if ((i = A()) === null) {
                                    g([t, i]);
                                }
                                e((t & 31) << 6 | i & 63);
                            } else if ((t & 240) == 224) {
                                if ((i = A()) === null || (r = A()) === null) {
                                    g([t, i, r]);
                                }
                                e((t & 15) << 12 | (i & 63) << 6 | r & 63);
                            } else {
                                if ((t & 248) != 240) {
                                    throw RangeError("Illegal starting byte: " + t);
                                }
                                if ((i = A()) === null || (r = A()) === null || (n = A()) === null) {
                                    g([t, i, r, n]);
                                }
                                e((t & 7) << 18 | (i & 63) << 12 | (r & 63) << 6 | n & 63);
                            }
                        }
                    },
                    UTF16toUTF8: function (A, e) {
                        for (var t, i = null;
                            (t = i !== null ? i : A()) !== null;) {
                            if (t >= 55296 && t <= 57343 && (i = A()) !== null && i >= 56320 && i <= 57343) {
                                e((t - 55296) * 1024 + i - 56320 + 65536);
                                i = null;
                            } else {
                                e(t);
                            }
                        }
                        if (i !== null) {
                            e(i);
                        }
                    },
                    UTF8toUTF16: function (A, e) {
                        var t = null;
                        for (typeof A == "number" && (t = A, A = function () {
                                return null;
                            }); t !== null || (t = A()) !== null;) {
                            if (t <= 65535) {
                                e(t);
                            } else {
                                e(55296 + ((t -= 65536) >> 10));
                                e(t % 1024 + 56320);
                            }
                            t = null;
                        }
                    },
                    encodeUTF16toUTF8: function (e, t) {
                        A.UTF16toUTF8(e, function (e) {
                            A.encodeUTF8(e, t);
                        });
                    },
                    decodeUTF8toUTF16: function (e, t) {
                        A.decodeUTF8(e, function (e) {
                            A.UTF8toUTF16(e, t);
                        });
                    },
                    calculateCodePoint: function (A) {
                        if (A < 128) {
                            return 1;
                        } else if (A < 2048) {
                            return 2;
                        } else if (A < 65536) {
                            return 3;
                        } else {
                            return 4;
                        }
                    },
                    calculateUTF8: function (e) {
                        for (var t, i = 0;
                            (t = e()) !== null;) {
                            i += A.calculateCodePoint(t);
                        }
                        return i;
                    },
                    calculateUTF16asUTF8: function (e) {
                        var t = 0;
                        var i = 0;
                        A.UTF16toUTF8(e, function (e) {
                            ++t;
                            i += A.calculateCodePoint(e);
                        });
                        return [t, i];
                    }
                };
                return A;
            }();
            t.toUTF8 = function (A, e) {
                if (A === undefined) {
                    A = this.offset;
                }
                if (e === undefined) {
                    e = this.limit;
                }
                if (!this.noAssert) {
                    if (typeof A != "number" || A % 1 != 0) {
                        throw TypeError("Illegal begin: Not an integer");
                    }
                    A >>>= 0;
                    if (typeof e != "number" || e % 1 != 0) {
                        throw TypeError("Illegal end: Not an integer");
                    }
                    e >>>= 0;
                    if (A < 0 || A > e || e > this.buffer.byteLength) {
                        throw RangeError("Illegal range: 0 <= " + A + " <= " + e + " <= " + this.buffer.byteLength);
                    }
                }
                var t;
                try {
                    s.decodeUTF8toUTF16(function () {
                        if (A < e) {
                            return this.view.getUint8(A++);
                        } else {
                            return null;
                        }
                    }.bind(this), t = o());
                } catch (t) {
                    if (A !== e) {
                        throw RangeError("Illegal range: Truncated data, " + A + " != " + e);
                    }
                }
                return t();
            };
            e.fromUTF8 = function (A, t, i) {
                if (!i && typeof A != "string") {
                    throw TypeError("Illegal str: Not a string");
                }
                var r = new e(s.calculateUTF16asUTF8(g(A), true)[1], t, i);
                var n = 0;
                s.encodeUTF16toUTF8(g(A), function (A) {
                    r.view.setUint8(n++, A);
                });
                r.limit = n;
                return r;
            };
            return e;
        }
        if (typeof require == "function" && typeof module == "object" && module && typeof exports == "object" && exports) {
            module.exports = function () {
                var A;
                try {
                    A = require("long");
                } catch (A) {}
                return e(A);
            }();
        } else if (typeof define == "function" && define.amd) {
            define("ByteBuffer", ["Long"], function (A) {
                return e(A);
            });
        } else {
            (A.dcodeIO = A.dcodeIO || {}).ByteBuffer = e(A.dcodeIO.Long);
        }
    })(this);
    /**
     * @license protobuf.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/protobuf.js for details
     */
    (function (A, e) {
        if (typeof define == "function" && define.amd) {
            define(["bytebuffer"], e);
        } else if (typeof require == "function" && typeof module == "object" && module && module.exports) {
            module.exports = e(require("bytebuffer"), true);
        } else {
            (A.dcodeIO = A.dcodeIO || {}).ProtoBuf = e(A.dcodeIO.ByteBuffer);
        }
    })(this, function (e, t) {
        "use strict";

        var i;
        var r = {
            ByteBuffer: e,
            Long: e.Long || null,
            VERSION: "5.0.1",
            WIRE_TYPES: {}
        };
        r.WIRE_TYPES.VARINT = 0;
        r.WIRE_TYPES.BITS64 = 1;
        r.WIRE_TYPES.LDELIM = 2;
        r.WIRE_TYPES.STARTGROUP = 3;
        r.WIRE_TYPES.ENDGROUP = 4;
        r.WIRE_TYPES.BITS32 = 5;
        r.PACKABLE_WIRE_TYPES = [r.WIRE_TYPES.VARINT, r.WIRE_TYPES.BITS64, r.WIRE_TYPES.BITS32];
        r.TYPES = {
            int32: {
                name: "int32",
                wireType: r.WIRE_TYPES.VARINT,
                defaultValue: 0
            },
            uint32: {
                name: "uint32",
                wireType: r.WIRE_TYPES.VARINT,
                defaultValue: 0
            },
            sint32: {
                name: "sint32",
                wireType: r.WIRE_TYPES.VARINT,
                defaultValue: 0
            },
            int64: {
                name: "int64",
                wireType: r.WIRE_TYPES.VARINT,
                defaultValue: r.Long ? r.Long.ZERO : undefined
            },
            uint64: {
                name: "uint64",
                wireType: r.WIRE_TYPES.VARINT,
                defaultValue: r.Long ? r.Long.UZERO : undefined
            },
            sint64: {
                name: "sint64",
                wireType: r.WIRE_TYPES.VARINT,
                defaultValue: r.Long ? r.Long.ZERO : undefined
            },
            bool: {
                name: "bool",
                wireType: r.WIRE_TYPES.VARINT,
                defaultValue: false
            },
            double: {
                name: "double",
                wireType: r.WIRE_TYPES.BITS64,
                defaultValue: 0
            },
            string: {
                name: "string",
                wireType: r.WIRE_TYPES.LDELIM,
                defaultValue: ""
            },
            bytes: {
                name: "bytes",
                wireType: r.WIRE_TYPES.LDELIM,
                defaultValue: null
            },
            fixed32: {
                name: "fixed32",
                wireType: r.WIRE_TYPES.BITS32,
                defaultValue: 0
            },
            sfixed32: {
                name: "sfixed32",
                wireType: r.WIRE_TYPES.BITS32,
                defaultValue: 0
            },
            fixed64: {
                name: "fixed64",
                wireType: r.WIRE_TYPES.BITS64,
                defaultValue: r.Long ? r.Long.UZERO : undefined
            },
            sfixed64: {
                name: "sfixed64",
                wireType: r.WIRE_TYPES.BITS64,
                defaultValue: r.Long ? r.Long.ZERO : undefined
            },
            float: {
                name: "float",
                wireType: r.WIRE_TYPES.BITS32,
                defaultValue: 0
            },
            enum: {
                name: "enum",
                wireType: r.WIRE_TYPES.VARINT,
                defaultValue: 0
            },
            message: {
                name: "message",
                wireType: r.WIRE_TYPES.LDELIM,
                defaultValue: null
            },
            group: {
                name: "group",
                wireType: r.WIRE_TYPES.STARTGROUP,
                defaultValue: null
            }
        };
        r.MAP_KEY_TYPES = [r.TYPES.int32, r.TYPES.sint32, r.TYPES.sfixed32, r.TYPES.uint32, r.TYPES.fixed32, r.TYPES.int64, r.TYPES.sint64, r.TYPES.sfixed64, r.TYPES.uint64, r.TYPES.fixed64, r.TYPES.bool, r.TYPES.string, r.TYPES.bytes];
        r.ID_MIN = 1;
        r.ID_MAX = 536870911;
        r.convertFieldsToCamelCase = false;
        r.populateAccessors = true;
        r.populateDefaults = true;
        r.Util = ((i = {}).IS_NODE = !(typeof A != "object" || A + "" != "[object process]" || A.browser), i.XHR = function () {
            for (var A = [function () {
                    return new XMLHttpRequest();
                }, function () {
                    return new ActiveXObject("Msxml2.XMLHTTP");
                }, function () {
                    return new ActiveXObject("Msxml3.XMLHTTP");
                }, function () {
                    return new ActiveXObject("Microsoft.XMLHTTP");
                }], e = null, t = 0; t < A.length; t++) {
                try {
                    e = A[t]();
                } catch (A) {
                    continue;
                }
                break;
            }
            if (!e) {
                throw Error("XMLHttpRequest is not supported");
            }
            return e;
        }, i.fetch = function (A, e) {
            if (e && typeof e != "function") {
                e = null;
            }
            if (i.IS_NODE) {
                var t = require("fs");
                if (e) {
                    t.readFile(A, function (A, t) {
                        e(A ? null : "" + t);
                    });
                } else {
                    try {
                        return t.readFileSync(A);
                    } catch (A) {
                        return null;
                    }
                }
            } else {
                var r = i.XHR();
                r.open("GET", A, !!e);
                r.setRequestHeader("Accept", "text/plain");
                if (typeof r.overrideMimeType == "function") {
                    r.overrideMimeType("text/plain");
                }
                if (!e) {
                    r.send(null);
                    if (r.status == 200 || r.status == 0 && typeof r.responseText == "string") {
                        return r.responseText;
                    } else {
                        return null;
                    }
                }
                r.onreadystatechange = function () {
                    if (r.readyState == 4) {
                        if (r.status == 200 || r.status == 0 && typeof r.responseText == "string") {
                            e(r.responseText);
                        } else {
                            e(null);
                        }
                    }
                };
                if (r.readyState == 4) {
                    return;
                }
                r.send(null);
            }
        }, i.toCamelCase = function (A) {
            return A.replace(/_([a-zA-Z])/g, function (A, e) {
                return e.toUpperCase();
            });
        }, i);
        r.Lang = {
            DELIM: /[\s\{\}=;:\[\],'"\(\)<>]/g,
            RULE: /^(?:required|optional|repeated|map)$/,
            TYPE: /^(?:double|float|int32|uint32|sint32|int64|uint64|sint64|fixed32|sfixed32|fixed64|sfixed64|bool|string|bytes)$/,
            NAME: /^[a-zA-Z_][a-zA-Z_0-9]*$/,
            TYPEDEF: /^[a-zA-Z][a-zA-Z_0-9]*$/,
            TYPEREF: /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,
            FQTYPEREF: /^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/,
            NUMBER: /^-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+|([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?)|inf|nan)$/,
            NUMBER_DEC: /^(?:[1-9][0-9]*|0)$/,
            NUMBER_HEX: /^0[xX][0-9a-fA-F]+$/,
            NUMBER_OCT: /^0[0-7]+$/,
            NUMBER_FLT: /^([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?|inf|nan)$/,
            BOOL: /^(?:true|false)$/i,
            ID: /^(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,
            NEGID: /^\-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,
            WHITESPACE: /\s/,
            STRING: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")|(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,
            STRING_DQ: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
            STRING_SQ: /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g
        };
        r.DotProto = function (A, e) {
            var t = {};
            var i = function (A) {
                this.source = A + "";
                this.index = 0;
                this.line = 1;
                this.stack = [];
                this._stringOpen = null;
            };
            var r = i.prototype;
            r._readString = function () {
                var A = this._stringOpen === "\"" ? e.STRING_DQ : e.STRING_SQ;
                A.lastIndex = this.index - 1;
                var t = A.exec(this.source);
                if (!t) {
                    throw Error("unterminated string");
                }
                this.index = A.lastIndex;
                this.stack.push(this._stringOpen);
                this._stringOpen = null;
                return t[1];
            };
            r.next = function () {
                if (this.stack.length > 0) {
                    return this.stack.shift();
                }
                if (this.index >= this.source.length) {
                    return null;
                }
                if (this._stringOpen !== null) {
                    return this._readString();
                }
                var A;
                var t;
                var i;
                do {
                    for (A = false; e.WHITESPACE.test(i = this.source.charAt(this.index));) {
                        if (i === "\n") {
                            ++this.line;
                        }
                        if (++this.index === this.source.length) {
                            return null;
                        }
                    }
                    if (this.source.charAt(this.index) === "/") {
                        ++this.index;
                        if (this.source.charAt(this.index) === "/") {
                            for (; this.source.charAt(++this.index) !== "\n";) {
                                if (this.index == this.source.length) {
                                    return null;
                                }
                            }
                            ++this.index;
                            ++this.line;
                            A = true;
                        } else {
                            if ((i = this.source.charAt(this.index)) !== "*") {
                                return "/";
                            }
                            do {
                                if (i === "\n") {
                                    ++this.line;
                                }
                                if (++this.index === this.source.length) {
                                    return null;
                                }
                                t = i;
                                i = this.source.charAt(this.index);
                            } while (t !== "*" || i !== "/");
                            ++this.index;
                            A = true;
                        }
                    }
                } while (A);
                if (this.index === this.source.length) {
                    return null;
                }
                var r = this.index;
                e.DELIM.lastIndex = 0;
                if (!e.DELIM.test(this.source.charAt(r++))) {
                    for (; r < this.source.length && !e.DELIM.test(this.source.charAt(r));) {
                        ++r;
                    }
                }
                var n = this.source.substring(this.index, this.index = r);
                if (!(n !== "\"" && n !== "'")) {
                    this._stringOpen = n;
                }
                return n;
            };
            r.peek = function () {
                if (this.stack.length === 0) {
                    var A = this.next();
                    if (A === null) {
                        return null;
                    }
                    this.stack.push(A);
                }
                return this.stack[0];
            };
            r.skip = function (A) {
                var e = this.next();
                if (e !== A) {
                    throw Error("illegal '" + e + "', '" + A + "' expected");
                }
            };
            r.omit = function (A) {
                return this.peek() === A && (this.next(), true);
            };
            r.toString = function () {
                return "Tokenizer (" + this.index + "/" + this.source.length + " at line " + this.line + ")";
            };
            t.Tokenizer = i;
            var n = function (A) {
                this.tn = new i(A);
                this.proto3 = false;
            };
            var g = n.prototype;

            function o (A, t) {
                var i = -1;
                var r = 1;
                if (A.charAt(0) == "-") {
                    r = -1;
                    A = A.substring(1);
                }
                if (e.NUMBER_DEC.test(A)) {
                    i = parseInt(A);
                } else if (e.NUMBER_HEX.test(A)) {
                    i = parseInt(A.substring(2), 16);
                } else {
                    if (!e.NUMBER_OCT.test(A)) {
                        throw Error("illegal id value: " + (r < 0 ? "-" : "") + A);
                    }
                    i = parseInt(A.substring(1), 8);
                }
                i = r * i | 0;
                if (!t && i < 0) {
                    throw Error("illegal id value: " + (r < 0 ? "-" : "") + A);
                }
                return i;
            }

            function I (A) {
                var t = 1;
                if (A.charAt(0) == "-") {
                    t = -1;
                    A = A.substring(1);
                }
                if (e.NUMBER_DEC.test(A)) {
                    return t * parseInt(A, 10);
                }
                if (e.NUMBER_HEX.test(A)) {
                    return t * parseInt(A.substring(2), 16);
                }
                if (e.NUMBER_OCT.test(A)) {
                    return t * parseInt(A.substring(1), 8);
                }
                if (A === "inf") {
                    return t * (1 / 0);
                }
                if (A === "nan") {
                    return NaN;
                }
                if (e.NUMBER_FLT.test(A)) {
                    return t * parseFloat(A);
                }
                throw Error("illegal number value: " + (t < 0 ? "-" : "") + A);
            }

            function s (A, e, t) {
                if (A[e] === undefined) {
                    A[e] = t;
                } else {
                    if (!Array.isArray(A[e])) {
                        A[e] = [A[e]];
                    }
                    A[e].push(t);
                }
            }
            g.parse = function () {
                var A;
                var t;
                var i = {
                    name: "[ROOT]",
                    package: null,
                    messages: [],
                    enums: [],
                    imports: [],
                    options: {},
                    services: []
                };
                var r = true;
                try {
                    for (; A = this.tn.next();) {
                        switch (A) {
                            case "package":
                                if (!r || i.package !== null) {
                                    throw Error("unexpected 'package'");
                                }
                                A = this.tn.next();
                                if (!e.TYPEREF.test(A)) {
                                    throw Error("illegal package name: " + A);
                                }
                                this.tn.skip(";");
                                i.package = A;
                                break;
                            case "import":
                                if (!r) {
                                    throw Error("unexpected 'import'");
                                }
                                if ((A = this.tn.peek()) === "public" || (t = A === "weak")) {
                                    this.tn.next();
                                }
                                A = this._readString();
                                this.tn.skip(";");
                                if (!t) {
                                    i.imports.push(A);
                                }
                                break;
                            case "syntax":
                                if (!r) {
                                    throw Error("unexpected 'syntax'");
                                }
                                this.tn.skip("=");
                                if ((i.syntax = this._readString()) === "proto3") {
                                    this.proto3 = true;
                                }
                                this.tn.skip(";");
                                break;
                            case "message":
                                this._parseMessage(i, null);
                                r = false;
                                break;
                            case "enum":
                                this._parseEnum(i);
                                r = false;
                                break;
                            case "option":
                                this._parseOption(i);
                                break;
                            case "service":
                                this._parseService(i);
                                break;
                            case "extend":
                                this._parseExtend(i);
                                break;
                            default:
                                throw Error("unexpected '" + A + "'");
                        }
                    }
                } catch (A) {
                    A.message = "Parse error at line " + this.tn.line + ": " + A.message;
                    throw A;
                }
                delete i.name;
                return i;
            };
            n.parse = function (A) {
                return new n(A).parse();
            };
            g._readString = function () {
                var A;
                var e;
                var t = "";
                do {
                    if ((e = this.tn.next()) !== "'" && e !== "\"") {
                        throw Error("illegal string delimiter: " + e);
                    }
                    t += this.tn.next();
                    this.tn.skip(e);
                    A = this.tn.peek();
                } while (A === "\"" || A === "\"");
                return t;
            };
            g._readValue = function (A) {
                var t = this.tn.peek();
                if (t === "\"" || t === "'") {
                    return this._readString();
                }
                this.tn.next();
                if (e.NUMBER.test(t)) {
                    return I(t);
                }
                if (e.BOOL.test(t)) {
                    return t.toLowerCase() === "true";
                }
                if (A && e.TYPEREF.test(t)) {
                    return t;
                }
                throw Error("illegal value: " + t);
            };
            g._parseOption = function (A, t) {
                var i = this.tn.next();
                var r = false;
                if (i === "(") {
                    r = true;
                    i = this.tn.next();
                }
                if (!e.TYPEREF.test(i)) {
                    throw Error("illegal option name: " + i);
                }
                var n = i;
                if (r) {
                    this.tn.skip(")");
                    n = "(" + n + ")";
                    i = this.tn.peek();
                    if (e.FQTYPEREF.test(i)) {
                        n += i;
                        this.tn.next();
                    }
                }
                this.tn.skip("=");
                this._parseOptionValue(A, n);
                if (!t) {
                    this.tn.skip(";");
                }
            };
            g._parseOptionValue = function (A, t) {
                var i = this.tn.peek();
                if (i !== "{") {
                    s(A.options, t, this._readValue(true));
                } else {
                    for (this.tn.skip("{");
                        (i = this.tn.next()) !== "}";) {
                        if (!e.NAME.test(i)) {
                            throw Error("illegal option name: " + t + "." + i);
                        }
                        if (this.tn.omit(":")) {
                            s(A.options, t + "." + i, this._readValue(true));
                        } else {
                            this._parseOptionValue(A, t + "." + i);
                        }
                    }
                }
            };
            g._parseService = function (A) {
                var t = this.tn.next();
                if (!e.NAME.test(t)) {
                    throw Error("illegal service name at line " + this.tn.line + ": " + t);
                }
                var i = {
                    name: t,
                    rpc: {},
                    options: {}
                };
                for (this.tn.skip("{");
                    (t = this.tn.next()) !== "}";) {
                    if (t === "option") {
                        this._parseOption(i);
                    } else {
                        if (t !== "rpc") {
                            throw Error("illegal service token: " + t);
                        }
                        this._parseServiceRPC(i);
                    }
                }
                this.tn.omit(";");
                A.services.push(i);
            };
            g._parseServiceRPC = function (A) {
                var t = this.tn.next();
                if (!e.NAME.test(t)) {
                    throw Error("illegal rpc service method name: " + t);
                }
                var i = t;
                var r = {
                    request: null,
                    response: null,
                    request_stream: false,
                    response_stream: false,
                    options: {}
                };
                this.tn.skip("(");
                if ((t = this.tn.next()).toLowerCase() === "stream") {
                    r.request_stream = true;
                    t = this.tn.next();
                }
                if (!e.TYPEREF.test(t)) {
                    throw Error("illegal rpc service request type: " + t);
                }
                r.request = t;
                this.tn.skip(")");
                if ((t = this.tn.next()).toLowerCase() !== "returns") {
                    throw Error("illegal rpc service request type delimiter: " + t);
                }
                this.tn.skip("(");
                if ((t = this.tn.next()).toLowerCase() === "stream") {
                    r.response_stream = true;
                    t = this.tn.next();
                }
                r.response = t;
                this.tn.skip(")");
                if ((t = this.tn.peek()) === "{") {
                    for (this.tn.next();
                        (t = this.tn.next()) !== "}";) {
                        if (t !== "option") {
                            throw Error("illegal rpc service token: " + t);
                        }
                        this._parseOption(r);
                    }
                    this.tn.omit(";");
                } else {
                    this.tn.skip(";");
                }
                if (A.rpc === undefined) {
                    A.rpc = {};
                }
                A.rpc[i] = r;
            };
            g._parseMessage = function (A, t) {
                var i = !!t;
                var r = this.tn.next();
                var n = {
                    name: "",
                    fields: [],
                    enums: [],
                    messages: [],
                    options: {},
                    services: [],
                    oneofs: {}
                };
                if (!e.NAME.test(r)) {
                    throw Error("illegal " + (i ? "group" : "message") + " name: " + r);
                }
                n.name = r;
                if (i) {
                    this.tn.skip("=");
                    t.id = o(this.tn.next());
                    n.isGroup = true;
                }
                if ((r = this.tn.peek()) === "[" && t) {
                    this._parseFieldOptions(t);
                }
                this.tn.skip("{");
                for (;
                    (r = this.tn.next()) !== "}";) {
                    if (e.RULE.test(r)) {
                        this._parseMessageField(n, r);
                    } else if (r === "oneof") {
                        this._parseMessageOneOf(n);
                    } else if (r === "enum") {
                        this._parseEnum(n);
                    } else if (r === "message") {
                        this._parseMessage(n);
                    } else if (r === "option") {
                        this._parseOption(n);
                    } else if (r === "service") {
                        this._parseService(n);
                    } else if (r === "extensions") {
                        n.extensions = this._parseExtensionRanges();
                    } else if (r === "reserved") {
                        this._parseIgnored();
                    } else if (r === "extend") {
                        this._parseExtend(n);
                    } else {
                        if (!e.TYPEREF.test(r)) {
                            throw Error("illegal message token: " + r);
                        }
                        if (!this.proto3) {
                            throw Error("illegal field rule: " + r);
                        }
                        this._parseMessageField(n, "optional", r);
                    }
                }
                this.tn.omit(";");
                A.messages.push(n);
                return n;
            };
            g._parseIgnored = function () {
                for (; this.tn.peek() !== ";";) {
                    this.tn.next();
                }
                this.tn.skip(";");
            };
            g._parseMessageField = function (A, t, i) {
                if (!e.RULE.test(t)) {
                    throw Error("illegal message field rule: " + t);
                }
                var r;
                var n = {
                    rule: t,
                    type: "",
                    name: "",
                    options: {},
                    id: 0
                };
                if (t === "map") {
                    if (i) {
                        throw Error("illegal type: " + i);
                    }
                    this.tn.skip("<");
                    r = this.tn.next();
                    if (!e.TYPE.test(r) && !e.TYPEREF.test(r)) {
                        throw Error("illegal message field type: " + r);
                    }
                    n.keytype = r;
                    this.tn.skip(",");
                    r = this.tn.next();
                    if (!e.TYPE.test(r) && !e.TYPEREF.test(r)) {
                        throw Error("illegal message field: " + r);
                    }
                    n.type = r;
                    this.tn.skip(">");
                    r = this.tn.next();
                    if (!e.NAME.test(r)) {
                        throw Error("illegal message field name: " + r);
                    }
                    n.name = r;
                    this.tn.skip("=");
                    n.id = o(this.tn.next());
                    if ((r = this.tn.peek()) === "[") {
                        this._parseFieldOptions(n);
                    }
                    this.tn.skip(";");
                } else if ((i = i !== undefined ? i : this.tn.next()) === "group") {
                    var g = this._parseMessage(A, n);
                    if (!/^[A-Z]/.test(g.name)) {
                        throw Error("illegal group name: " + g.name);
                    }
                    n.type = g.name;
                    n.name = g.name.toLowerCase();
                    this.tn.omit(";");
                } else {
                    if (!e.TYPE.test(i) && !e.TYPEREF.test(i)) {
                        throw Error("illegal message field type: " + i);
                    }
                    n.type = i;
                    r = this.tn.next();
                    if (!e.NAME.test(r)) {
                        throw Error("illegal message field name: " + r);
                    }
                    n.name = r;
                    this.tn.skip("=");
                    n.id = o(this.tn.next());
                    if ((r = this.tn.peek()) === "[") {
                        this._parseFieldOptions(n);
                    }
                    this.tn.skip(";");
                }
                A.fields.push(n);
                return n;
            };
            g._parseMessageOneOf = function (A) {
                var t = this.tn.next();
                if (!e.NAME.test(t)) {
                    throw Error("illegal oneof name: " + t);
                }
                var i;
                var r = t;
                var n = [];
                for (this.tn.skip("{");
                    (t = this.tn.next()) !== "}";) {
                    (i = this._parseMessageField(A, "optional", t)).oneof = r;
                    n.push(i.id);
                }
                this.tn.omit(";");
                A.oneofs[r] = n;
            };
            g._parseFieldOptions = function (A) {
                this.tn.skip("[");
                for (var e = true; this.tn.peek() !== "]";) {
                    if (!e) {
                        this.tn.skip(",");
                    }
                    this._parseOption(A, true);
                    e = false;
                }
                this.tn.next();
            };
            g._parseEnum = function (A) {
                var t = {
                    name: "",
                    values: [],
                    options: {}
                };
                var i = this.tn.next();
                if (!e.NAME.test(i)) {
                    throw Error("illegal name: " + i);
                }
                t.name = i;
                this.tn.skip("{");
                for (;
                    (i = this.tn.next()) !== "}";) {
                    if (i === "option") {
                        this._parseOption(t);
                    } else {
                        if (!e.NAME.test(i)) {
                            throw Error("illegal name: " + i);
                        }
                        this.tn.skip("=");
                        var r = {
                            name: i,
                            id: o(this.tn.next(), true)
                        };
                        if ((i = this.tn.peek()) === "[") {
                            this._parseFieldOptions({
                                options: {}
                            });
                        }
                        this.tn.skip(";");
                        t.values.push(r);
                    }
                }
                this.tn.omit(";");
                A.enums.push(t);
            };
            g._parseExtensionRanges = function () {
                var e;
                var t;
                var i;
                var r = [];
                do {
                    for (t = [];;) {
                        switch (e = this.tn.next()) {
                            case "min":
                                i = A.ID_MIN;
                                break;
                            case "max":
                                i = A.ID_MAX;
                                break;
                            default:
                                i = I(e);
                        }
                        t.push(i);
                        if (t.length === 2) {
                            break;
                        }
                        if (this.tn.peek() !== "to") {
                            t.push(i);
                            break;
                        }
                        this.tn.next();
                    }
                    r.push(t);
                } while (this.tn.omit(","));
                this.tn.skip(";");
                return r;
            };
            g._parseExtend = function (A) {
                var t = this.tn.next();
                if (!e.TYPEREF.test(t)) {
                    throw Error("illegal extend reference: " + t);
                }
                var i = {
                    ref: t,
                    fields: []
                };
                for (this.tn.skip("{");
                    (t = this.tn.next()) !== "}";) {
                    if (e.RULE.test(t)) {
                        this._parseMessageField(i, t);
                    } else {
                        if (!e.TYPEREF.test(t)) {
                            throw Error("illegal extend token: " + t);
                        }
                        if (!this.proto3) {
                            throw Error("illegal field rule: " + t);
                        }
                        this._parseMessageField(i, "optional", t);
                    }
                }
                this.tn.omit(";");
                A.messages.push(i);
                return i;
            };
            g.toString = function () {
                return "Parser at line " + this.tn.line;
            };
            t.Parser = n;
            return t;
        }(r, r.Lang);
        r.Reflect = function (A) {
            var t = {};
            var i = function (A, e, t) {
                this.builder = A;
                this.parent = e;
                this.name = t;
                this.className;
            };
            var r = i.prototype;
            r.fqn = function () {
                for (var A = this.name, e = this;
                    (e = e.parent) != null;) {
                    A = e.name + "." + A;
                }
                return A;
            };
            r.toString = function (A) {
                return (A ? this.className + " " : "") + this.fqn();
            };
            r.build = function () {
                throw Error(this.toString(true) + " cannot be built directly");
            };
            t.T = i;
            var n = function (A, e, t, r, n) {
                i.call(this, A, e, t);
                this.className = "Namespace";
                this.children = [];
                this.options = r || {};
                this.syntax = n || "proto2";
            };
            var g = n.prototype = Object.create(i.prototype);
            g.getChildren = function (A) {
                if ((A = A || null) == null) {
                    return this.children.slice();
                }
                for (var e = [], t = 0, i = this.children.length; t < i; ++t) {
                    if (this.children[t] instanceof A) {
                        e.push(this.children[t]);
                    }
                }
                return e;
            };
            g.addChild = function (A) {
                var e;
                if (e = this.getChild(A.name)) {
                    if (e instanceof f.Field && e.name !== e.originalName && this.getChild(e.originalName) === null) {
                        e.name = e.originalName;
                    } else {
                        if (!(A instanceof f.Field && A.name !== A.originalName && this.getChild(A.originalName) === null)) {
                            throw Error("Duplicate name in namespace " + this.toString(true) + ": " + A.name);
                        }
                        A.name = A.originalName;
                    }
                }
                this.children.push(A);
            };
            g.getChild = function (A) {
                for (var e = typeof A == "number" ? "id" : "name", t = 0, i = this.children.length; t < i; ++t) {
                    if (this.children[t][e] === A) {
                        return this.children[t];
                    }
                }
                return null;
            };
            g.resolve = function (A, e) {
                var i;
                var r = typeof A == "string" ? A.split(".") : A;
                var n = this;
                var g = 0;
                if (r[g] === "") {
                    for (; n.parent !== null;) {
                        n = n.parent;
                    }
                    g++;
                }
                do {
                    do {
                        if (!(n instanceof t.Namespace)) {
                            n = null;
                            break;
                        }
                        if (!(i = n.getChild(r[g])) || !(i instanceof t.T) || e && !(i instanceof t.Namespace)) {
                            n = null;
                            break;
                        }
                        n = i;
                        g++;
                    } while (g < r.length);
                    if (n != null) {
                        break;
                    }
                    if (this.parent !== null) {
                        return this.parent.resolve(A, e);
                    }
                } while (n != null);
                return n;
            };
            g.qn = function (A) {
                var e = [];
                var i = A;
                do {
                    e.unshift(i.name);
                    i = i.parent;
                } while (i !== null);
                for (var r = 1; r <= e.length; r++) {
                    var n = e.slice(e.length - r);
                    if (A === this.resolve(n, A instanceof t.Namespace)) {
                        return n.join(".");
                    }
                }
                return A.fqn();
            };
            g.build = function () {
                for (var A, e = {}, t = this.children, i = 0, r = t.length; i < r; ++i) {
                    if ((A = t[i]) instanceof n) {
                        e[A.name] = A.build();
                    }
                }
                if (Object.defineProperty) {
                    Object.defineProperty(e, "$options", {
                        value: this.buildOpt()
                    });
                }
                return e;
            };
            g.buildOpt = function () {
                for (var A = {}, e = Object.keys(this.options), t = 0, i = e.length; t < i; ++t) {
                    var r = e[t];
                    var n = this.options[e[t]];
                    A[r] = n;
                }
                return A;
            };
            g.getOption = function (A) {
                if (A === undefined) {
                    return this.options;
                } else if (this.options[A] !== undefined) {
                    return this.options[A];
                } else {
                    return null;
                }
            };
            t.Namespace = n;
            var o = function (e, t, i, r) {
                this.type = e;
                this.resolvedType = t;
                this.isMapKey = i;
                this.syntax = r;
                if (i && A.MAP_KEY_TYPES.indexOf(e) < 0) {
                    throw Error("Invalid map key type: " + e.name);
                }
            };
            var I = o.prototype;

            function s (e, t) {
                if (e && typeof e.low == "number" && typeof e.high == "number" && typeof e.unsigned == "boolean" && e.low == e.low && e.high == e.high) {
                    return new A.Long(e.low, e.high, t === undefined ? e.unsigned : t);
                }
                if (typeof e == "string") {
                    return A.Long.fromString(e, t || false, 10);
                }
                if (typeof e == "number") {
                    return A.Long.fromNumber(e, t || false);
                }
                throw Error("not convertible to Long");
            }
            o.defaultFieldValue = function (t) {
                if (typeof t == "string") {
                    t = A.TYPES[t];
                }
                if (t.defaultValue === undefined) {
                    throw Error("default value for type " + t.name + " is not supported");
                }
                if (t == A.TYPES.bytes) {
                    return new e(0);
                } else {
                    return t.defaultValue;
                }
            };
            I.verifyValue = function (t) {
                var i = this;

                function r (A, e) {
                    throw Error("Illegal value for " + i.toString(true) + " of type " + i.type.name + ": " + A + " (" + e + ")");
                }
                switch (this.type) {
                    case A.TYPES.int32:
                    case A.TYPES.sint32:
                    case A.TYPES.sfixed32:
                        if (typeof t != "number" || t == t && t % 1 != 0) {
                            r(typeof t, "not an integer");
                        }
                        if (t > 4294967295) {
                            return t | 0;
                        } else {
                            return t;
                        }
                    case A.TYPES.uint32:
                    case A.TYPES.fixed32:
                        if (typeof t != "number" || t == t && t % 1 != 0) {
                            r(typeof t, "not an integer");
                        }
                        if (t < 0) {
                            return t >>> 0;
                        } else {
                            return t;
                        }
                    case A.TYPES.int64:
                    case A.TYPES.sint64:
                    case A.TYPES.sfixed64:
                        if (A.Long) {
                            try {
                                return s(t, false);
                            } catch (A) {
                                r(typeof t, A.message);
                            }
                        } else {
                            r(typeof t, "requires Long.js");
                        }
                    case A.TYPES.uint64:
                    case A.TYPES.fixed64:
                        if (A.Long) {
                            try {
                                return s(t, true);
                            } catch (A) {
                                r(typeof t, A.message);
                            }
                        } else {
                            r(typeof t, "requires Long.js");
                        }
                    case A.TYPES.bool:
                        if (typeof t != "boolean") {
                            r(typeof t, "not a boolean");
                        }
                        return t;
                    case A.TYPES.float:
                    case A.TYPES.double:
                        if (typeof t != "number") {
                            r(typeof t, "not a number");
                        }
                        return t;
                    case A.TYPES.string:
                        if (!(typeof t == "string" || t && t instanceof String)) {
                            r(typeof t, "not a string");
                        }
                        return "" + t;
                    case A.TYPES.bytes:
                        if (e.isByteBuffer(t)) {
                            return t;
                        } else {
                            return e.wrap(t, "base64");
                        }
                    case A.TYPES.enum:
                        var n = this.resolvedType.getChildren(A.Reflect.Enum.Value);
                        for (o = 0; o < n.length; o++) {
                            if (n[o].name == t) {
                                return n[o].id;
                            }
                            if (n[o].id == t) {
                                return n[o].id;
                            }
                        }
                        if (this.syntax === "proto3") {
                            if (typeof t != "number" || t == t && t % 1 != 0) {
                                r(typeof t, "not an integer");
                            }
                            if (t > 4294967295 || t < 0) {
                                r(typeof t, "not in range for uint32");
                            }
                            return t;
                        }
                        r(t, "not a valid enum value");
                    case A.TYPES.group:
                    case A.TYPES.message:
                        if (!(t && typeof t == "object")) {
                            r(typeof t, "object expected");
                        }
                        if (t instanceof this.resolvedType.clazz) {
                            return t;
                        }
                        if (t instanceof A.Builder.Message) {
                            var g = {};
                            for (var o in t) {
                                if (t.hasOwnProperty(o)) {
                                    g[o] = t[o];
                                }
                            }
                            t = g;
                        }
                        return new this.resolvedType.clazz(t);
                }
                throw Error("[INTERNAL] Illegal value for " + this.toString(true) + ": " + t + " (undefined type " + this.type + ")");
            };
            I.calculateLength = function (t, i) {
                if (i === null) {
                    return 0;
                }
                var r;
                switch (this.type) {
                    case A.TYPES.int32:
                        if (i < 0) {
                            return e.calculateVarint64(i);
                        } else {
                            return e.calculateVarint32(i);
                        }
                    case A.TYPES.uint32:
                        return e.calculateVarint32(i);
                    case A.TYPES.sint32:
                        return e.calculateVarint32(e.zigZagEncode32(i));
                    case A.TYPES.fixed32:
                    case A.TYPES.sfixed32:
                    case A.TYPES.float:
                        return 4;
                    case A.TYPES.int64:
                    case A.TYPES.uint64:
                        return e.calculateVarint64(i);
                    case A.TYPES.sint64:
                        return e.calculateVarint64(e.zigZagEncode64(i));
                    case A.TYPES.fixed64:
                    case A.TYPES.sfixed64:
                        return 8;
                    case A.TYPES.bool:
                        return 1;
                    case A.TYPES.enum:
                        return e.calculateVarint32(i);
                    case A.TYPES.double:
                        return 8;
                    case A.TYPES.string:
                        r = e.calculateUTF8Bytes(i);
                        return e.calculateVarint32(r) + r;
                    case A.TYPES.bytes:
                        if (i.remaining() < 0) {
                            throw Error("Illegal value for " + this.toString(true) + ": " + i.remaining() + " bytes remaining");
                        }
                        return e.calculateVarint32(i.remaining()) + i.remaining();
                    case A.TYPES.message:
                        r = this.resolvedType.calculate(i);
                        return e.calculateVarint32(r) + r;
                    case A.TYPES.group:
                        return (r = this.resolvedType.calculate(i)) + e.calculateVarint32(t << 3 | A.WIRE_TYPES.ENDGROUP);
                }
                throw Error("[INTERNAL] Illegal value to encode in " + this.toString(true) + ": " + i + " (unknown type)");
            };
            I.encodeValue = function (t, i, r) {
                if (i === null) {
                    return r;
                }
                switch (this.type) {
                    case A.TYPES.int32:
                        if (i < 0) {
                            r.writeVarint64(i);
                        } else {
                            r.writeVarint32(i);
                        }
                        break;
                    case A.TYPES.uint32:
                        r.writeVarint32(i);
                        break;
                    case A.TYPES.sint32:
                        r.writeVarint32ZigZag(i);
                        break;
                    case A.TYPES.fixed32:
                        r.writeUint32(i);
                        break;
                    case A.TYPES.sfixed32:
                        r.writeInt32(i);
                        break;
                    case A.TYPES.int64:
                    case A.TYPES.uint64:
                        r.writeVarint64(i);
                        break;
                    case A.TYPES.sint64:
                        r.writeVarint64ZigZag(i);
                        break;
                    case A.TYPES.fixed64:
                        r.writeUint64(i);
                        break;
                    case A.TYPES.sfixed64:
                        r.writeInt64(i);
                        break;
                    case A.TYPES.bool:
                        if (typeof i == "string") {
                            r.writeVarint32(i.toLowerCase() === "false" ? 0 : !!i);
                        } else {
                            r.writeVarint32(i ? 1 : 0);
                        }
                        break;
                    case A.TYPES.enum:
                        r.writeVarint32(i);
                        break;
                    case A.TYPES.float:
                        r.writeFloat32(i);
                        break;
                    case A.TYPES.double:
                        r.writeFloat64(i);
                        break;
                    case A.TYPES.string:
                        r.writeVString(i);
                        break;
                    case A.TYPES.bytes:
                        if (i.remaining() < 0) {
                            throw Error("Illegal value for " + this.toString(true) + ": " + i.remaining() + " bytes remaining");
                        }
                        var n = i.offset;
                        r.writeVarint32(i.remaining());
                        r.append(i);
                        i.offset = n;
                        break;
                    case A.TYPES.message:
                        var g = new e().LE();
                        this.resolvedType.encode(i, g);
                        r.writeVarint32(g.offset);
                        r.append(g.flip());
                        break;
                    case A.TYPES.group:
                        this.resolvedType.encode(i, r);
                        r.writeVarint32(t << 3 | A.WIRE_TYPES.ENDGROUP);
                        break;
                    default:
                        throw Error("[INTERNAL] Illegal value to encode in " + this.toString(true) + ": " + i + " (unknown type)");
                }
                return r;
            };
            I.decode = function (e, t, i) {
                if (t != this.type.wireType) {
                    throw Error("Unexpected wire type for element");
                }
                var r;
                var n;
                switch (this.type) {
                    case A.TYPES.int32:
                        return e.readVarint32() | 0;
                    case A.TYPES.uint32:
                        return e.readVarint32() >>> 0;
                    case A.TYPES.sint32:
                        return e.readVarint32ZigZag() | 0;
                    case A.TYPES.fixed32:
                        return e.readUint32() >>> 0;
                    case A.TYPES.sfixed32:
                        return e.readInt32() | 0;
                    case A.TYPES.int64:
                        return e.readVarint64();
                    case A.TYPES.uint64:
                        return e.readVarint64().toUnsigned();
                    case A.TYPES.sint64:
                        return e.readVarint64ZigZag();
                    case A.TYPES.fixed64:
                        return e.readUint64();
                    case A.TYPES.sfixed64:
                        return e.readInt64();
                    case A.TYPES.bool:
                        return !!e.readVarint32();
                    case A.TYPES.enum:
                        return e.readVarint32();
                    case A.TYPES.float:
                        return e.readFloat();
                    case A.TYPES.double:
                        return e.readDouble();
                    case A.TYPES.string:
                        return e.readVString();
                    case A.TYPES.bytes:
                        n = e.readVarint32();
                        if (e.remaining() < n) {
                            throw Error("Illegal number of bytes for " + this.toString(true) + ": " + n + " required but got only " + e.remaining());
                        }
                        (r = e.clone()).limit = r.offset + n;
                        e.offset += n;
                        return r;
                    case A.TYPES.message:
                        n = e.readVarint32();
                        return this.resolvedType.decode(e, n);
                    case A.TYPES.group:
                        return this.resolvedType.decode(e, -1, i);
                }
                throw Error("[INTERNAL] Illegal decode type");
            };
            I.valueFromString = function (t) {
                if (!this.isMapKey) {
                    throw Error("valueFromString() called on non-map-key element");
                }
                switch (this.type) {
                    case A.TYPES.int32:
                    case A.TYPES.sint32:
                    case A.TYPES.sfixed32:
                    case A.TYPES.uint32:
                    case A.TYPES.fixed32:
                        return this.verifyValue(parseInt(t));
                    case A.TYPES.int64:
                    case A.TYPES.sint64:
                    case A.TYPES.sfixed64:
                    case A.TYPES.uint64:
                    case A.TYPES.fixed64:
                        return this.verifyValue(t);
                    case A.TYPES.bool:
                        return t === "true";
                    case A.TYPES.string:
                        return this.verifyValue(t);
                    case A.TYPES.bytes:
                        return e.fromBinary(t);
                }
            };
            I.valueToString = function (e) {
                if (!this.isMapKey) {
                    throw Error("valueToString() called on non-map-key element");
                }
                if (this.type === A.TYPES.bytes) {
                    return e.toString("binary");
                } else {
                    return e.toString();
                }
            };
            t.Element = o;
            var f = function (A, e, t, i, r, g) {
                n.call(this, A, e, t, i, g);
                this.className = "Message";
                this.extensions = undefined;
                this.clazz = null;
                this.isGroup = !!r;
                this._fields = null;
                this._fieldsById = null;
                this._fieldsByName = null;
            };
            var a = f.prototype = Object.create(n.prototype);

            function h (e, t) {
                var i = t.readVarint32();
                var r = i & 7;
                var n = i >>> 3;
                switch (r) {
                    case A.WIRE_TYPES.VARINT:
                        do {
                            i = t.readUint8();
                        } while ((i & 128) == 128);
                        break;
                    case A.WIRE_TYPES.BITS64:
                        t.offset += 8;
                        break;
                    case A.WIRE_TYPES.LDELIM:
                        i = t.readVarint32();
                        t.offset += i;
                        break;
                    case A.WIRE_TYPES.STARTGROUP:
                        h(n, t);
                        break;
                    case A.WIRE_TYPES.ENDGROUP:
                        if (n === e) {
                            return false;
                        }
                        throw Error("Illegal GROUPEND after unknown group: " + n + " (" + e + " expected)");
                    case A.WIRE_TYPES.BITS32:
                        t.offset += 4;
                        break;
                    default:
                        throw Error("Illegal wire type in unknown group " + e + ": " + r);
                }
                return true;
            }
            a.build = function (t) {
                if (this.clazz && !t) {
                    return this.clazz;
                }
                var i = function (A, t) {
                    var i = t.getChildren(A.Reflect.Message.Field);
                    var r = t.getChildren(A.Reflect.Message.OneOf);
                    var n = function (g, o) {
                        A.Builder.Message.call(this);
                        for (var I = 0, s = r.length; I < s; ++I) {
                            this[r[I].name] = null;
                        }
                        I = 0;
                        s = i.length;
                        for (; I < s; ++I) {
                            var f = i[I];
                            this[f.name] = f.repeated ? [] : f.map ? new A.Map(f) : null;
                            if (!(!f.required && t.syntax !== "proto3" || f.defaultValue === null)) {
                                this[f.name] = f.defaultValue;
                            }
                        }
                        var a;
                        if (arguments.length > 0) {
                            if (arguments.length !== 1 || g === null || typeof g != "object" || !(typeof g.encode != "function" || g instanceof n) || Array.isArray(g) || g instanceof A.Map || e.isByteBuffer(g) || g instanceof ArrayBuffer || A.Long && g instanceof A.Long) {
                                I = 0;
                                s = arguments.length;
                                I = 0;
                                s = arguments.length;
                                for (; I < s; ++I) {
                                    if ((a = arguments[I]) !== undefined) {
                                        this.$set(i[I].name, a);
                                    }
                                }
                            } else {
                                this.$set(g);
                            }
                        }
                    };
                    var g = n.prototype = Object.create(A.Builder.Message.prototype);
                    g.add = function (e, i, r) {
                        var n = t._fieldsByName[e];
                        if (!r) {
                            if (!n) {
                                throw Error(this + "#" + e + " is undefined");
                            }
                            if (!(n instanceof A.Reflect.Message.Field)) {
                                throw Error(this + "#" + e + " is not a field: " + n.toString(true));
                            }
                            if (!n.repeated) {
                                throw Error(this + "#" + e + " is not a repeated field");
                            }
                            i = n.verifyValue(i, true);
                        }
                        if (this[e] === null) {
                            this[e] = [];
                        }
                        this[e].push(i);
                        return this;
                    };
                    g.$add = g.add;
                    g.set = function (e, i, r) {
                        if (e && typeof e == "object") {
                            r = i;
                            for (var n in e) {
                                if (e.hasOwnProperty(n) && (i = e[n]) !== undefined) {
                                    this.$set(n, i, r);
                                }
                            }
                            return this;
                        }
                        var g = t._fieldsByName[e];
                        if (r) {
                            this[e] = i;
                        } else {
                            if (!g) {
                                throw Error(this + "#" + e + " is not a field: undefined");
                            }
                            if (!(g instanceof A.Reflect.Message.Field)) {
                                throw Error(this + "#" + e + " is not a field: " + g.toString(true));
                            }
                            this[g.name] = i = g.verifyValue(i);
                        }
                        if (g && g.oneof) {
                            var o = this[g.oneof.name];
                            if (i !== null) {
                                if (o !== null && o !== g.name) {
                                    this[o] = null;
                                }
                                this[g.oneof.name] = g.name;
                            } else if (o === e) {
                                this[g.oneof.name] = null;
                            }
                        }
                        return this;
                    };
                    g.$set = g.set;
                    g.get = function (e, i) {
                        if (i) {
                            return this[e];
                        }
                        var r = t._fieldsByName[e];
                        if (!(r && r instanceof A.Reflect.Message.Field)) {
                            throw Error(this + "#" + e + " is not a field: undefined");
                        }
                        if (!(r instanceof A.Reflect.Message.Field)) {
                            throw Error(this + "#" + e + " is not a field: " + r.toString(true));
                        }
                        return this[r.name];
                    };
                    g.$get = g.get;
                    for (var o = 0; o < i.length; o++) {
                        var I = i[o];
                        if (!(I instanceof A.Reflect.Message.ExtensionField)) {
                            if (t.builder.options.populateAccessors) {
                                (function (A) {
                                    var e = A.originalName.replace(/(_[a-zA-Z])/g, function (A) {
                                        return A.toUpperCase().replace("_", "");
                                    });
                                    e = e.substring(0, 1).toUpperCase() + e.substring(1);
                                    var i = A.originalName.replace(/([A-Z])/g, function (A) {
                                        return "_" + A;
                                    });
                                    var r = function (e, t) {
                                        this[A.name] = t ? e : A.verifyValue(e);
                                        return this;
                                    };
                                    var n = function () {
                                        return this[A.name];
                                    };
                                    if (t.getChild("set" + e) === null) {
                                        g["set" + e] = r;
                                    }
                                    if (t.getChild("set_" + i) === null) {
                                        g["set_" + i] = r;
                                    }
                                    if (t.getChild("get" + e) === null) {
                                        g["get" + e] = n;
                                    }
                                    if (t.getChild("get_" + i) === null) {
                                        g["get_" + i] = n;
                                    }
                                })(I);
                            }
                        }
                    }

                    function s (t, i, r, n) {
                        if (t === null || typeof t != "object") {
                            if (n && n instanceof A.Reflect.Enum) {
                                var g = A.Reflect.Enum.getName(n.object, t);
                                if (g !== null) {
                                    return g;
                                }
                            }
                            return t;
                        }
                        if (e.isByteBuffer(t)) {
                            if (i) {
                                return t.toBase64();
                            } else {
                                return t.toBuffer();
                            }
                        }
                        if (A.Long.isLong(t)) {
                            if (r) {
                                return t.toString();
                            } else {
                                return A.Long.fromValue(t);
                            }
                        }
                        var o;
                        if (Array.isArray(t)) {
                            o = [];
                            t.forEach(function (A, e) {
                                o[e] = s(A, i, r, n);
                            });
                            return o;
                        }
                        o = {};
                        if (t instanceof A.Map) {
                            for (var I = t.entries(), f = I.next(); !f.done; f = I.next()) {
                                o[t.keyElem.valueToString(f.value[0])] = s(f.value[1], i, r, t.valueElem.resolvedType);
                            }
                            return o;
                        }
                        var a = t.$type;
                        var h = undefined;
                        for (var B in t) {
                            if (t.hasOwnProperty(B)) {
                                if (a && (h = a.getChild(B))) {
                                    o[B] = s(t[B], i, r, h.resolvedType);
                                } else {
                                    o[B] = s(t[B], i, r);
                                }
                            }
                        }
                        return o;
                    }
                    g.encode = function (A, i) {
                        if (typeof A == "boolean") {
                            i = A;
                            A = undefined;
                        }
                        var r = false;
                        if (!A) {
                            A = new e();
                            r = true;
                        }
                        var n = A.littleEndian;
                        try {
                            t.encode(this, A.LE(), i);
                            return (r ? A.flip() : A).LE(n);
                        } catch (e) {
                            A.LE(n);
                            throw e;
                        }
                    };
                    n.encode = function (A, e, t) {
                        return new n(A).encode(e, t);
                    };
                    g.calculate = function () {
                        return t.calculate(this);
                    };
                    g.encodeDelimited = function (A, i) {
                        var r = false;
                        if (!A) {
                            A = new e();
                            r = true;
                        }
                        var n = new e().LE();
                        t.encode(this, n, i).flip();
                        A.writeVarint32(n.remaining());
                        A.append(n);
                        if (r) {
                            return A.flip();
                        } else {
                            return A;
                        }
                    };
                    g.encodeAB = function () {
                        try {
                            return this.encode().toArrayBuffer();
                        } catch (A) {
                            if (A.encoded) {
                                A.encoded = A.encoded.toArrayBuffer();
                            }
                            throw A;
                        }
                    };
                    g.toArrayBuffer = g.encodeAB;
                    g.encodeNB = function () {
                        try {
                            return this.encode().toBuffer();
                        } catch (A) {
                            if (A.encoded) {
                                A.encoded = A.encoded.toBuffer();
                            }
                            throw A;
                        }
                    };
                    g.toBuffer = g.encodeNB;
                    g.encode64 = function () {
                        try {
                            return this.encode().toBase64();
                        } catch (A) {
                            if (A.encoded) {
                                A.encoded = A.encoded.toBase64();
                            }
                            throw A;
                        }
                    };
                    g.toBase64 = g.encode64;
                    g.encodeHex = function () {
                        try {
                            return this.encode().toHex();
                        } catch (A) {
                            if (A.encoded) {
                                A.encoded = A.encoded.toHex();
                            }
                            throw A;
                        }
                    };
                    g.toHex = g.encodeHex;
                    g.toRaw = function (A, e) {
                        return s(this, !!A, !!e, this.$type);
                    };
                    g.encodeJSON = function () {
                        return JSON.stringify(s(this, true, true, this.$type));
                    };
                    n.decode = function (A, i, r) {
                        if (typeof i == "string") {
                            r = i;
                            i = -1;
                        }
                        if (typeof A == "string") {
                            A = e.wrap(A, r || "base64");
                        }
                        var n = (A = e.isByteBuffer(A) ? A : e.wrap(A)).littleEndian;
                        try {
                            var g = t.decode(A.LE());
                            A.LE(n);
                            return g;
                        } catch (e) {
                            A.LE(n);
                            throw e;
                        }
                    };
                    n.decodeDelimited = function (A, i) {
                        if (typeof A == "string") {
                            A = e.wrap(A, i || "base64");
                        }
                        if ((A = e.isByteBuffer(A) ? A : e.wrap(A)).remaining() < 1) {
                            return null;
                        }
                        var r = A.offset;
                        var n = A.readVarint32();
                        if (A.remaining() < n) {
                            A.offset = r;
                            return null;
                        }
                        try {
                            var g = t.decode(A.slice(A.offset, A.offset + n).LE());
                            A.offset += n;
                            return g;
                        } catch (e) {
                            A.offset += n;
                            throw e;
                        }
                    };
                    n.decode64 = function (A) {
                        return n.decode(A, "base64");
                    };
                    n.decodeHex = function (A) {
                        return n.decode(A, "hex");
                    };
                    n.decodeJSON = function (A) {
                        return new n(JSON.parse(A));
                    };
                    g.toString = function () {
                        return t.toString();
                    };
                    if (Object.defineProperty) {
                        Object.defineProperty(n, "$options", {
                            value: t.buildOpt()
                        });
                        Object.defineProperty(g, "$options", {
                            value: n.$options
                        });
                        Object.defineProperty(n, "$type", {
                            value: t
                        });
                        Object.defineProperty(g, "$type", {
                            value: t
                        });
                    }
                    return n;
                }(A, this);
                this._fields = [];
                this._fieldsById = {};
                this._fieldsByName = {};
                for (var r, n = 0, g = this.children.length; n < g; n++) {
                    if ((r = this.children[n]) instanceof u || r instanceof f || r instanceof l) {
                        if (i.hasOwnProperty(r.name)) {
                            throw Error("Illegal reflect child of " + this.toString(true) + ": " + r.toString(true) + " cannot override static property '" + r.name + "'");
                        }
                        i[r.name] = r.build();
                    } else if (r instanceof f.Field) {
                        r.build();
                        this._fields.push(r);
                        this._fieldsById[r.id] = r;
                        this._fieldsByName[r.name] = r;
                    } else if (!(r instanceof f.OneOf || r instanceof c)) {
                        throw Error("Illegal reflect child of " + this.toString(true) + ": " + this.children[n].toString(true));
                    }
                }
                return this.clazz = i;
            };
            a.encode = function (A, e, t) {
                for (var i, r, n = null, g = 0, o = this._fields.length; g < o; ++g) {
                    r = A[(i = this._fields[g]).name];
                    if (i.required && r === null) {
                        if (n === null) {
                            n = i;
                        }
                    } else {
                        i.encode(t ? r : i.verifyValue(r), e, A);
                    }
                }
                if (n !== null) {
                    var I = Error("Missing at least one required field for " + this.toString(true) + ": " + n);
                    I.encoded = e;
                    throw I;
                }
                return e;
            };
            a.calculate = function (A) {
                for (var e, t, i = 0, r = 0, n = this._fields.length; r < n; ++r) {
                    t = A[(e = this._fields[r]).name];
                    if (e.required && t === null) {
                        throw Error("Missing at least one required field for " + this.toString(true) + ": " + e);
                    }
                    i += e.calculate(t, A);
                }
                return i;
            };
            a.decode = function (e, t, i) {
                t = typeof t == "number" ? t : -1;
                for (var r, n, g, o, I = e.offset, s = new this.clazz(); e.offset < I + t || t === -1 && e.remaining() > 0;) {
                    g = (r = e.readVarint32()) >>> 3;
                    if ((n = r & 7) === A.WIRE_TYPES.ENDGROUP) {
                        if (g !== i) {
                            throw Error("Illegal group end indicator for " + this.toString(true) + ": " + g + " (" + (i ? i + " expected" : "not a group") + ")");
                        }
                        break;
                    }
                    if (o = this._fieldsById[g]) {
                        if (o.repeated && !o.options.packed) {
                            s[o.name].push(o.decode(n, e));
                        } else if (o.map) {
                            var f = o.decode(n, e);
                            s[o.name].set(f[0], f[1]);
                        } else {
                            s[o.name] = o.decode(n, e);
                            if (o.oneof) {
                                var a = s[o.oneof.name];
                                if (a !== null && a !== o.name) {
                                    s[a] = null;
                                }
                                s[o.oneof.name] = o.name;
                            }
                        }
                    } else {
                        switch (n) {
                            case A.WIRE_TYPES.VARINT:
                                e.readVarint32();
                                break;
                            case A.WIRE_TYPES.BITS32:
                                e.offset += 4;
                                break;
                            case A.WIRE_TYPES.BITS64:
                                e.offset += 8;
                                break;
                            case A.WIRE_TYPES.LDELIM:
                                var B = e.readVarint32();
                                e.offset += B;
                                break;
                            case A.WIRE_TYPES.STARTGROUP:
                                for (; h(g, e););
                                break;
                            default:
                                throw Error("Illegal wire type for unknown field " + g + " in " + this.toString(true) + "#decode: " + n);
                        }
                    }
                }
                for (var C = 0, E = this._fields.length; C < E; ++C) {
                    if (s[(o = this._fields[C]).name] === null) {
                        if (this.syntax === "proto3") {
                            s[o.name] = o.defaultValue;
                        } else {
                            if (o.required) {
                                var u = Error("Missing at least one required field for " + this.toString(true) + ": " + o.name);
                                u.decoded = s;
                                throw u;
                            }
                            if (A.populateDefaults && o.defaultValue !== null) {
                                s[o.name] = o.defaultValue;
                            }
                        }
                    }
                }
                return s;
            };
            t.Message = f;
            var B = function (e, t, r, n, g, o, I, s, a, h) {
                i.call(this, e, t, o);
                this.className = "Message.Field";
                this.required = r === "required";
                this.repeated = r === "repeated";
                this.map = r === "map";
                this.keyType = n || null;
                this.type = g;
                this.resolvedType = null;
                this.id = I;
                this.options = s || {};
                this.defaultValue = null;
                this.oneof = a || null;
                this.syntax = h || "proto2";
                this.originalName = this.name;
                this.element = null;
                this.keyElement = null;
                if (!(!this.builder.options.convertFieldsToCamelCase || this instanceof f.ExtensionField)) {
                    this.name = A.Util.toCamelCase(this.name);
                }
            };
            var C = B.prototype = Object.create(i.prototype);
            C.build = function () {
                this.element = new o(this.type, this.resolvedType, false, this.syntax);
                if (this.map) {
                    this.keyElement = new o(this.keyType, undefined, true, this.syntax);
                }
                if (this.syntax !== "proto3" || this.repeated || this.map) {
                    if (this.options.default !== undefined) {
                        this.defaultValue = this.verifyValue(this.options.default);
                    }
                } else {
                    this.defaultValue = o.defaultFieldValue(this.type);
                }
            };
            C.verifyValue = function (e, t) {
                t = t || false;
                var i;
                var r = this;

                function n (A, e) {
                    throw Error("Illegal value for " + r.toString(true) + " of type " + r.type.name + ": " + A + " (" + e + ")");
                }
                if (e === null) {
                    if (this.required) {
                        n(typeof e, "required");
                    }
                    if (this.syntax === "proto3" && this.type !== A.TYPES.message) {
                        n(typeof e, "proto3 field without field presence cannot be null");
                    }
                    return null;
                }
                if (this.repeated && !t) {
                    if (!Array.isArray(e)) {
                        e = [e];
                    }
                    var g = [];
                    for (i = 0; i < e.length; i++) {
                        g.push(this.element.verifyValue(e[i]));
                    }
                    return g;
                }
                if (this.map && !t) {
                    if (e instanceof A.Map) {
                        return e;
                    } else {
                        if (!(e instanceof Object)) {
                            n(typeof e, "expected ProtoBuf.Map or raw object for map field");
                        }
                        return new A.Map(this, e);
                    }
                } else {
                    if (!this.repeated && Array.isArray(e)) {
                        n(typeof e, "no array expected");
                    }
                    return this.element.verifyValue(e);
                }
            };
            C.hasWirePresence = function (e, t) {
                if (this.syntax !== "proto3") {
                    return e !== null;
                }
                if (this.oneof && t[this.oneof.name] === this.name) {
                    return true;
                }
                switch (this.type) {
                    case A.TYPES.int32:
                    case A.TYPES.sint32:
                    case A.TYPES.sfixed32:
                    case A.TYPES.uint32:
                    case A.TYPES.fixed32:
                        return e !== 0;
                    case A.TYPES.int64:
                    case A.TYPES.sint64:
                    case A.TYPES.sfixed64:
                    case A.TYPES.uint64:
                    case A.TYPES.fixed64:
                        return e.low !== 0 || e.high !== 0;
                    case A.TYPES.bool:
                        return e;
                    case A.TYPES.float:
                    case A.TYPES.double:
                        return e !== 0;
                    case A.TYPES.string:
                        return e.length > 0;
                    case A.TYPES.bytes:
                        return e.remaining() > 0;
                    case A.TYPES.enum:
                        return e !== 0;
                    case A.TYPES.message:
                        return e !== null;
                    default:
                        return true;
                }
            };
            C.encode = function (t, i, r) {
                if (this.type === null || typeof this.type != "object") {
                    throw Error("[INTERNAL] Unresolved type in " + this.toString(true) + ": " + this.type);
                }
                if (t === null || this.repeated && t.length == 0) {
                    return i;
                }
                try {
                    var n;
                    if (this.repeated) {
                        if (this.options.packed && A.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                            i.writeVarint32(this.id << 3 | A.WIRE_TYPES.LDELIM);
                            i.ensureCapacity(i.offset += 1);
                            var g = i.offset;
                            for (n = 0; n < t.length; n++) {
                                this.element.encodeValue(this.id, t[n], i);
                            }
                            var o = i.offset - g;
                            var I = e.calculateVarint32(o);
                            if (I > 1) {
                                var s = i.slice(g, i.offset);
                                g += I - 1;
                                i.offset = g;
                                i.append(s);
                            }
                            i.writeVarint32(o, g - I);
                        } else {
                            for (n = 0; n < t.length; n++) {
                                i.writeVarint32(this.id << 3 | this.type.wireType);
                                this.element.encodeValue(this.id, t[n], i);
                            }
                        }
                    } else if (this.map) {
                        t.forEach(function (t, r, n) {
                            var g = e.calculateVarint32(this.keyType.wireType | 8) + this.keyElement.calculateLength(1, r) + e.calculateVarint32(this.type.wireType | 16) + this.element.calculateLength(2, t);
                            i.writeVarint32(this.id << 3 | A.WIRE_TYPES.LDELIM);
                            i.writeVarint32(g);
                            i.writeVarint32(this.keyType.wireType | 8);
                            this.keyElement.encodeValue(1, r, i);
                            i.writeVarint32(this.type.wireType | 16);
                            this.element.encodeValue(2, t, i);
                        }, this);
                    } else if (this.hasWirePresence(t, r)) {
                        i.writeVarint32(this.id << 3 | this.type.wireType);
                        this.element.encodeValue(this.id, t, i);
                    }
                } catch (A) {
                    throw Error("Illegal value for " + this.toString(true) + ": " + t + " (" + A + ")");
                }
                return i;
            };
            C.calculate = function (t, i) {
                t = this.verifyValue(t);
                if (this.type === null || typeof this.type != "object") {
                    throw Error("[INTERNAL] Unresolved type in " + this.toString(true) + ": " + this.type);
                }
                if (t === null || this.repeated && t.length == 0) {
                    return 0;
                }
                var r = 0;
                try {
                    var n;
                    var g;
                    if (this.repeated) {
                        if (this.options.packed && A.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                            r += e.calculateVarint32(this.id << 3 | A.WIRE_TYPES.LDELIM);
                            g = 0;
                            n = 0;
                            for (; n < t.length; n++) {
                                g += this.element.calculateLength(this.id, t[n]);
                            }
                            r += e.calculateVarint32(g);
                            r += g;
                        } else {
                            for (n = 0; n < t.length; n++) {
                                r += e.calculateVarint32(this.id << 3 | this.type.wireType);
                                r += this.element.calculateLength(this.id, t[n]);
                            }
                        }
                    } else if (this.map) {
                        t.forEach(function (t, i, n) {
                            var g = e.calculateVarint32(this.keyType.wireType | 8) + this.keyElement.calculateLength(1, i) + e.calculateVarint32(this.type.wireType | 16) + this.element.calculateLength(2, t);
                            r += e.calculateVarint32(this.id << 3 | A.WIRE_TYPES.LDELIM);
                            r += e.calculateVarint32(g);
                            r += g;
                        }, this);
                    } else if (this.hasWirePresence(t, i)) {
                        r += e.calculateVarint32(this.id << 3 | this.type.wireType);
                        r += this.element.calculateLength(this.id, t);
                    }
                } catch (A) {
                    throw Error("Illegal value for " + this.toString(true) + ": " + t + " (" + A + ")");
                }
                return r;
            };
            C.decode = function (e, t, i) {
                var r;
                var n;
                if (!(!this.map && e == this.type.wireType || !i && this.repeated && this.options.packed && e == A.WIRE_TYPES.LDELIM || this.map && e == A.WIRE_TYPES.LDELIM)) {
                    throw Error("Illegal wire type for field " + this.toString(true) + ": " + e + " (" + this.type.wireType + " expected)");
                }
                if (e == A.WIRE_TYPES.LDELIM && this.repeated && this.options.packed && A.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0 && !i) {
                    n = t.readVarint32();
                    n = t.offset + n;
                    for (var g = []; t.offset < n;) {
                        g.push(this.decode(this.type.wireType, t, true));
                    }
                    return g;
                }
                if (this.map) {
                    var I = o.defaultFieldValue(this.keyType);
                    r = o.defaultFieldValue(this.type);
                    n = t.readVarint32();
                    if (t.remaining() < n) {
                        throw Error("Illegal number of bytes for " + this.toString(true) + ": " + n + " required but got only " + t.remaining());
                    }
                    var s = t.clone();
                    s.limit = s.offset + n;
                    t.offset += n;
                    for (; s.remaining() > 0;) {
                        var f = s.readVarint32();
                        e = f & 7;
                        var a = f >>> 3;
                        if (a === 1) {
                            I = this.keyElement.decode(s, e, a);
                        } else {
                            if (a !== 2) {
                                throw Error("Unexpected tag in map field key/value submessage");
                            }
                            r = this.element.decode(s, e, a);
                        }
                    }
                    return [I, r];
                }
                return this.element.decode(t, e, this.id);
            };
            t.Message.Field = B;
            var E = function (A, e, t, i, r, n, g) {
                B.call(this, A, e, t, null, i, r, n, g);
                this.extension;
            };
            E.prototype = Object.create(B.prototype);
            t.Message.ExtensionField = E;
            t.Message.OneOf = function (A, e, t) {
                i.call(this, A, e, t);
                this.fields = [];
            };
            var u = function (A, e, t, i, r) {
                n.call(this, A, e, t, i, r);
                this.className = "Enum";
                this.object = null;
            };
            u.getName = function (A, e) {
                for (var t, i = Object.keys(A), r = 0; r < i.length; ++r) {
                    if (A[t = i[r]] === e) {
                        return t;
                    }
                }
                return null;
            };
            (u.prototype = Object.create(n.prototype)).build = function (e) {
                if (this.object && !e) {
                    return this.object;
                }
                for (var t = new A.Builder.Enum(), i = this.getChildren(u.Value), r = 0, n = i.length; r < n; ++r) {
                    t[i[r].name] = i[r].id;
                }
                if (Object.defineProperty) {
                    Object.defineProperty(t, "$options", {
                        value: this.buildOpt(),
                        enumerable: false
                    });
                }
                return this.object = t;
            };
            t.Enum = u;
            var Q = function (A, e, t, r) {
                i.call(this, A, e, t);
                this.className = "Enum.Value";
                this.id = r;
            };
            Q.prototype = Object.create(i.prototype);
            t.Enum.Value = Q;
            var c = function (A, e, t, r) {
                i.call(this, A, e, t);
                this.field = r;
            };
            c.prototype = Object.create(i.prototype);
            t.Extension = c;
            var l = function (A, e, t, i) {
                n.call(this, A, e, t, i);
                this.className = "Service";
                this.clazz = null;
            };
            (l.prototype = Object.create(n.prototype)).build = function (t) {
                if (this.clazz && !t) {
                    return this.clazz;
                } else {
                    return this.clazz = function (A, t) {
                        for (var i = function (e) {
                                A.Builder.Service.call(this);
                                this.rpcImpl = e || function (A, e, t) {
                                    setTimeout(t.bind(this, Error("Not implemented, see: https://github.com/dcodeIO/ProtoBuf.js/wiki/Services")), 0);
                                };
                            }, r = i.prototype = Object.create(A.Builder.Service.prototype), n = t.getChildren(A.Reflect.Service.RPCMethod), g = 0; g < n.length; g++) {
                            ! function (A) {
                                r[A.name] = function (i, r) {
                                    try {
                                        try {
                                            i = A.resolvedRequestType.clazz.decode(e.wrap(i));
                                        } catch (A) {
                                            if (!(A instanceof TypeError)) {
                                                throw A;
                                            }
                                        }
                                        if (i === null || typeof i != "object") {
                                            throw Error("Illegal arguments");
                                        }
                                        if (!(i instanceof A.resolvedRequestType.clazz)) {
                                            i = new A.resolvedRequestType.clazz(i);
                                        }
                                        this.rpcImpl(A.fqn(), i, function (e, i) {
                                            if (e) {
                                                r(e);
                                            } else {
                                                if (i === null) {
                                                    i = "";
                                                }
                                                try {
                                                    i = A.resolvedResponseType.clazz.decode(i);
                                                } catch (A) {}
                                                if (i && i instanceof A.resolvedResponseType.clazz) {
                                                    r(null, i);
                                                } else {
                                                    r(Error("Illegal response type received in service method " + t.name + "#" + A.name));
                                                }
                                            }
                                        });
                                    } catch (A) {
                                        setTimeout(r.bind(this, A), 0);
                                    }
                                };
                                i[A.name] = function (e, t, r) {
                                    new i(e)[A.name](t, r);
                                };
                                if (Object.defineProperty) {
                                    Object.defineProperty(i[A.name], "$options", {
                                        value: A.buildOpt()
                                    });
                                    Object.defineProperty(r[A.name], "$options", {
                                        value: i[A.name].$options
                                    });
                                }
                            }(n[g]);
                        }
                        if (Object.defineProperty) {
                            Object.defineProperty(i, "$options", {
                                value: t.buildOpt()
                            });
                            Object.defineProperty(r, "$options", {
                                value: i.$options
                            });
                            Object.defineProperty(i, "$type", {
                                value: t
                            });
                            Object.defineProperty(r, "$type", {
                                value: t
                            });
                        }
                        return i;
                    }(A, this);
                }
            };
            t.Service = l;
            var w = function (A, e, t, r) {
                i.call(this, A, e, t);
                this.className = "Service.Method";
                this.options = r || {};
            };
            (w.prototype = Object.create(i.prototype)).buildOpt = g.buildOpt;
            t.Service.Method = w;
            var y = function (A, e, t, i, r, n, g, o) {
                w.call(this, A, e, t, o);
                this.className = "Service.RPCMethod";
                this.requestName = i;
                this.responseName = r;
                this.requestStream = n;
                this.responseStream = g;
                this.resolvedRequestType = null;
                this.resolvedResponseType = null;
            };
            y.prototype = Object.create(w.prototype);
            t.Service.RPCMethod = y;
            return t;
        }(r);
        r.Builder = function (A, e, t) {
            var i = function (A) {
                this.ns = new t.Namespace(this, null, "");
                this.ptr = this.ns;
                this.resolved = false;
                this.result = null;
                this.files = {};
                this.importRoot = null;
                this.options = A || {};
            };
            var r = i.prototype;
            i.isMessage = function (A) {
                return typeof A.name == "string" && A.values === undefined && A.rpc === undefined;
            };
            i.isMessageField = function (A) {
                return typeof A.rule == "string" && typeof A.name == "string" && typeof A.type == "string" && A.id !== undefined;
            };
            i.isEnum = function (A) {
                return typeof A.name == "string" && !(A.values === undefined || !Array.isArray(A.values) || A.values.length === 0);
            };
            i.isService = function (A) {
                return !(typeof A.name != "string" || typeof A.rpc != "object" || !A.rpc);
            };
            i.isExtend = function (A) {
                return typeof A.ref == "string";
            };
            r.reset = function () {
                this.ptr = this.ns;
                return this;
            };
            r.define = function (A) {
                if (typeof A != "string" || !e.TYPEREF.test(A)) {
                    throw Error("illegal namespace: " + A);
                }
                A.split(".").forEach(function (A) {
                    var e = this.ptr.getChild(A);
                    if (e === null) {
                        this.ptr.addChild(e = new t.Namespace(this, this.ptr, A));
                    }
                    this.ptr = e;
                }, this);
                return this;
            };
            r.create = function (e) {
                if (!e) {
                    return this;
                }
                if (Array.isArray(e)) {
                    if (e.length === 0) {
                        return this;
                    }
                    e = e.slice();
                } else {
                    e = [e];
                }
                for (var r = [e]; r.length > 0;) {
                    e = r.pop();
                    if (!Array.isArray(e)) {
                        throw Error("not a valid namespace: " + JSON.stringify(e));
                    }
                    for (; e.length > 0;) {
                        var n = e.shift();
                        if (i.isMessage(n)) {
                            var g = new t.Message(this, this.ptr, n.name, n.options, n.isGroup, n.syntax);
                            var o = {};
                            if (n.oneofs) {
                                Object.keys(n.oneofs).forEach(function (A) {
                                    g.addChild(o[A] = new t.Message.OneOf(this, g, A));
                                }, this);
                            }
                            if (n.fields) {
                                n.fields.forEach(function (A) {
                                    if (g.getChild(A.id | 0) !== null) {
                                        throw Error("duplicate or invalid field id in " + g.name + ": " + A.id);
                                    }
                                    if (A.options && typeof A.options != "object") {
                                        throw Error("illegal field options in " + g.name + "#" + A.name);
                                    }
                                    var e = null;
                                    if (typeof A.oneof == "string" && !(e = o[A.oneof])) {
                                        throw Error("illegal oneof in " + g.name + "#" + A.name + ": " + A.oneof);
                                    }
                                    A = new t.Message.Field(this, g, A.rule, A.keytype, A.type, A.name, A.id, A.options, e, n.syntax);
                                    if (e) {
                                        e.fields.push(A);
                                    }
                                    g.addChild(A);
                                }, this);
                            }
                            var I = [];
                            if (n.enums) {
                                n.enums.forEach(function (A) {
                                    I.push(A);
                                });
                            }
                            if (n.messages) {
                                n.messages.forEach(function (A) {
                                    I.push(A);
                                });
                            }
                            if (n.services) {
                                n.services.forEach(function (A) {
                                    I.push(A);
                                });
                            }
                            if (n.extensions) {
                                if (typeof n.extensions[0] == "number") {
                                    g.extensions = [n.extensions];
                                } else {
                                    g.extensions = n.extensions;
                                }
                            }
                            this.ptr.addChild(g);
                            if (I.length > 0) {
                                r.push(e);
                                e = I;
                                I = null;
                                this.ptr = g;
                                g = null;
                                continue;
                            }
                            I = null;
                        } else if (i.isEnum(n)) {
                            g = new t.Enum(this, this.ptr, n.name, n.options, n.syntax);
                            n.values.forEach(function (A) {
                                g.addChild(new t.Enum.Value(this, g, A.name, A.id));
                            }, this);
                            this.ptr.addChild(g);
                        } else if (i.isService(n)) {
                            g = new t.Service(this, this.ptr, n.name, n.options);
                            Object.keys(n.rpc).forEach(function (A) {
                                var e = n.rpc[A];
                                g.addChild(new t.Service.RPCMethod(this, g, A, e.request, e.response, !!e.request_stream, !!e.response_stream, e.options));
                            }, this);
                            this.ptr.addChild(g);
                        } else {
                            if (!i.isExtend(n)) {
                                throw Error("not a valid definition: " + JSON.stringify(n));
                            }
                            if (g = this.ptr.resolve(n.ref, true)) {
                                n.fields.forEach(function (e) {
                                    if (g.getChild(e.id | 0) !== null) {
                                        throw Error("duplicate extended field id in " + g.name + ": " + e.id);
                                    }
                                    if (g.extensions) {
                                        var i = false;
                                        g.extensions.forEach(function (A) {
                                            if (e.id >= A[0] && e.id <= A[1]) {
                                                i = true;
                                            }
                                        });
                                        if (!i) {
                                            throw Error("illegal extended field id in " + g.name + ": " + e.id + " (not within valid ranges)");
                                        }
                                    }
                                    var r = e.name;
                                    if (this.options.convertFieldsToCamelCase) {
                                        r = A.Util.toCamelCase(r);
                                    }
                                    var n = new t.Message.ExtensionField(this, g, e.rule, e.type, this.ptr.fqn() + "." + r, e.id, e.options);
                                    var o = new t.Extension(this, this.ptr, e.name, n);
                                    n.extension = o;
                                    this.ptr.addChild(o);
                                    g.addChild(n);
                                }, this);
                            } else if (!/\.?google\.protobuf\./.test(n.ref)) {
                                throw Error("extended message " + n.ref + " is not defined");
                            }
                        }
                        n = null;
                        g = null;
                    }
                    e = null;
                    this.ptr = this.ptr.parent;
                }
                this.resolved = false;
                this.result = null;
                return this;
            };
            r.import = function (e, t) {
                var i = "/";
                if (typeof t == "string") {
                    if (A.Util.IS_NODE) {
                        t = require("path").resolve(t);
                    }
                    if (this.files[t] === true) {
                        return this.reset();
                    }
                    this.files[t] = true;
                } else if (typeof t == "object") {
                    var r = t.root;
                    if (A.Util.IS_NODE) {
                        r = require("path").resolve(r);
                    }
                    if (r.indexOf("\\") >= 0 || t.file.indexOf("\\") >= 0) {
                        i = "\\";
                    }
                    var n = r + i + t.file;
                    if (this.files[n] === true) {
                        return this.reset();
                    }
                    this.files[n] = true;
                }
                if (e.imports && e.imports.length > 0) {
                    var g;
                    var o = false;
                    if (typeof t == "object") {
                        this.importRoot = t.root;
                        o = true;
                        g = this.importRoot;
                        t = t.file;
                        if (g.indexOf("\\") >= 0 || t.indexOf("\\") >= 0) {
                            i = "\\";
                        }
                    } else if (typeof t == "string") {
                        if (this.importRoot) {
                            g = this.importRoot;
                        } else if (t.indexOf("/") >= 0) {
                            if ((g = t.replace(/\/[^\/]*$/, "")) === "") {
                                g = "/";
                            }
                        } else if (t.indexOf("\\") >= 0) {
                            g = t.replace(/\\[^\\]*$/, "");
                            i = "\\";
                        } else {
                            g = ".";
                        }
                    } else {
                        g = null;
                    }
                    for (var I = 0; I < e.imports.length; I++) {
                        if (typeof e.imports[I] == "string") {
                            if (!g) {
                                throw Error("cannot determine import root");
                            }
                            var s = e.imports[I];
                            if (s === "google/protobuf/descriptor.proto") {
                                continue;
                            }
                            s = g + i + s;
                            if (this.files[s] === true) {
                                continue;
                            }
                            if (/\.proto$/i.test(s) && !A.DotProto) {
                                s = s.replace(/\.proto$/, ".json");
                            }
                            var f = A.Util.fetch(s);
                            if (f === null) {
                                throw Error("failed to import '" + s + "' in '" + t + "': file not found");
                            }
                            if (/\.json$/i.test(s)) {
                                this.import(JSON.parse(f + ""), s);
                            } else {
                                this.import(A.DotProto.Parser.parse(f), s);
                            }
                        } else if (t) {
                            if (/\.(\w+)$/.test(t)) {
                                this.import(e.imports[I], t.replace(/^(.+)\.(\w+)$/, function (A, e, t) {
                                    return e + "_import" + I + "." + t;
                                }));
                            } else {
                                this.import(e.imports[I], t + "_import" + I);
                            }
                        } else {
                            this.import(e.imports[I]);
                        }
                    }
                    if (o) {
                        this.importRoot = null;
                    }
                }
                if (e.package) {
                    this.define(e.package);
                }
                if (e.syntax) {
                    (function A (e) {
                        if (e.messages) {
                            e.messages.forEach(function (t) {
                                t.syntax = e.syntax;
                                A(t);
                            });
                        }
                        if (e.enums) {
                            e.enums.forEach(function (A) {
                                A.syntax = e.syntax;
                            });
                        }
                    })(e);
                }
                var a = this.ptr;
                if (e.options) {
                    Object.keys(e.options).forEach(function (A) {
                        a.options[A] = e.options[A];
                    });
                }
                if (e.messages) {
                    this.create(e.messages);
                    this.ptr = a;
                }
                if (e.enums) {
                    this.create(e.enums);
                    this.ptr = a;
                }
                if (e.services) {
                    this.create(e.services);
                    this.ptr = a;
                }
                if (e.extends) {
                    this.create(e.extends);
                }
                return this.reset();
            };
            r.resolveAll = function () {
                var i;
                if (this.ptr == null || typeof this.ptr.type == "object") {
                    return this;
                }
                if (this.ptr instanceof t.Namespace) {
                    this.ptr.children.forEach(function (A) {
                        this.ptr = A;
                        this.resolveAll();
                    }, this);
                } else if (this.ptr instanceof t.Message.Field) {
                    if (e.TYPE.test(this.ptr.type)) {
                        this.ptr.type = A.TYPES[this.ptr.type];
                    } else {
                        if (!e.TYPEREF.test(this.ptr.type)) {
                            throw Error("illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.type);
                        }
                        if (!(i = (this.ptr instanceof t.Message.ExtensionField ? this.ptr.extension.parent : this.ptr.parent).resolve(this.ptr.type, true))) {
                            throw Error("unresolvable type reference in " + this.ptr.toString(true) + ": " + this.ptr.type);
                        }
                        this.ptr.resolvedType = i;
                        if (i instanceof t.Enum) {
                            this.ptr.type = A.TYPES.enum;
                            if (this.ptr.syntax === "proto3" && i.syntax !== "proto3") {
                                throw Error("proto3 message cannot reference proto2 enum");
                            }
                        } else {
                            if (!(i instanceof t.Message)) {
                                throw Error("illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.type);
                            }
                            this.ptr.type = i.isGroup ? A.TYPES.group : A.TYPES.message;
                        }
                    }
                    if (this.ptr.map) {
                        if (!e.TYPE.test(this.ptr.keyType)) {
                            throw Error("illegal key type for map field in " + this.ptr.toString(true) + ": " + this.ptr.keyType);
                        }
                        this.ptr.keyType = A.TYPES[this.ptr.keyType];
                    }
                } else if (this.ptr instanceof A.Reflect.Service.Method) {
                    if (!(this.ptr instanceof A.Reflect.Service.RPCMethod)) {
                        throw Error("illegal service type in " + this.ptr.toString(true));
                    }
                    if (!((i = this.ptr.parent.resolve(this.ptr.requestName, true)) && i instanceof A.Reflect.Message)) {
                        throw Error("Illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.requestName);
                    }
                    this.ptr.resolvedRequestType = i;
                    if (!((i = this.ptr.parent.resolve(this.ptr.responseName, true)) && i instanceof A.Reflect.Message)) {
                        throw Error("Illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.responseName);
                    }
                    this.ptr.resolvedResponseType = i;
                } else if (!(this.ptr instanceof A.Reflect.Message.OneOf || this.ptr instanceof A.Reflect.Extension || this.ptr instanceof A.Reflect.Enum.Value)) {
                    throw Error("illegal object in namespace: " + typeof this.ptr + ": " + this.ptr);
                }
                return this.reset();
            };
            r.build = function (A) {
                this.reset();
                if (!this.resolved) {
                    this.resolveAll();
                    this.resolved = true;
                    this.result = null;
                }
                if (this.result === null) {
                    this.result = this.ns.build();
                }
                if (!A) {
                    return this.result;
                }
                for (var e = typeof A == "string" ? A.split(".") : A, t = this.result, i = 0; i < e.length; i++) {
                    if (!t[e[i]]) {
                        t = null;
                        break;
                    }
                    t = t[e[i]];
                }
                return t;
            };
            r.lookup = function (A, e) {
                if (A) {
                    return this.ns.resolve(A, e);
                } else {
                    return this.ns;
                }
            };
            r.toString = function () {
                return "Builder";
            };
            i.Message = function () {};
            i.Enum = function () {};
            i.Service = function () {};
            return i;
        }(r, r.Lang, r.Reflect);
        r.Map = function (A, e) {
            var t = function (A, t) {
                if (!A.map) {
                    throw Error("field is not a map");
                }
                this.field = A;
                this.keyElem = new e.Element(A.keyType, null, true, A.syntax);
                this.valueElem = new e.Element(A.type, A.resolvedType, false, A.syntax);
                this.map = {};
                Object.defineProperty(this, "size", {
                    get: function () {
                        return Object.keys(this.map).length;
                    }
                });
                if (t) {
                    for (var i = Object.keys(t), r = 0; r < i.length; r++) {
                        var n = this.keyElem.valueFromString(i[r]);
                        var g = this.valueElem.verifyValue(t[i[r]]);
                        this.map[this.keyElem.valueToString(n)] = {
                            key: n,
                            value: g
                        };
                    }
                }
            };
            var i = t.prototype;

            function r (A) {
                var e = 0;
                return {
                    next: function () {
                        if (e < A.length) {
                            return {
                                done: false,
                                value: A[e++]
                            };
                        } else {
                            return {
                                done: true
                            };
                        }
                    }
                };
            }
            i.clear = function () {
                this.map = {};
            };
            i.delete = function (A) {
                var e = this.keyElem.valueToString(this.keyElem.verifyValue(A));
                var t = (e in this.map);
                delete this.map[e];
                return t;
            };
            i.entries = function () {
                for (var A, e = [], t = Object.keys(this.map), i = 0; i < t.length; i++) {
                    e.push([(A = this.map[t[i]]).key, A.value]);
                }
                return r(e);
            };
            i.keys = function () {
                for (var A = [], e = Object.keys(this.map), t = 0; t < e.length; t++) {
                    A.push(this.map[e[t]].key);
                }
                return r(A);
            };
            i.values = function () {
                for (var A = [], e = Object.keys(this.map), t = 0; t < e.length; t++) {
                    A.push(this.map[e[t]].value);
                }
                return r(A);
            };
            i.forEach = function (A, e) {
                for (var t, i = Object.keys(this.map), r = 0; r < i.length; r++) {
                    A.call(e, (t = this.map[i[r]]).value, t.key, this);
                }
            };
            i.set = function (A, e) {
                var t = this.keyElem.verifyValue(A);
                var i = this.valueElem.verifyValue(e);
                this.map[this.keyElem.valueToString(t)] = {
                    key: t,
                    value: i
                };
                return this;
            };
            i.get = function (A) {
                var e = this.keyElem.valueToString(this.keyElem.verifyValue(A));
                if (e in this.map) {
                    return this.map[e].value;
                }
            };
            i.has = function (A) {
                return this.keyElem.valueToString(this.keyElem.verifyValue(A)) in this.map;
            };
            return t;
        }(0, r.Reflect);
        r.loadProto = function (A, e, t) {
            if (typeof e == "string" || e && typeof e.file == "string" && typeof e.root == "string") {
                t = e;
                e = undefined;
            }
            return r.loadJson(r.DotProto.Parser.parse(A), e, t);
        };
        r.protoFromString = r.loadProto;
        r.loadProtoFile = function (A, e, t) {
            if (e && typeof e == "object") {
                t = e;
                e = null;
            } else if (!(e && typeof e == "function")) {
                e = null;
            }
            if (e) {
                return r.Util.fetch(typeof A == "string" ? A : A.root + "/" + A.file, function (i) {
                    if (i !== null) {
                        try {
                            e(null, r.loadProto(i, t, A));
                        } catch (A) {
                            e(A);
                        }
                    } else {
                        e(Error("Failed to fetch file"));
                    }
                });
            }
            var i = r.Util.fetch(typeof A == "object" ? A.root + "/" + A.file : A);
            if (i === null) {
                return null;
            } else {
                return r.loadProto(i, t, A);
            }
        };
        r.protoFromFile = r.loadProtoFile;
        r.newBuilder = function (A) {
            if ((A = A || {}).convertFieldsToCamelCase === undefined) {
                A.convertFieldsToCamelCase = r.convertFieldsToCamelCase;
            }
            if (A.populateAccessors === undefined) {
                A.populateAccessors = r.populateAccessors;
            }
            return new r.Builder(A);
        };
        r.loadJson = function (A, e, t) {
            if (typeof e == "string" || e && typeof e.file == "string" && typeof e.root == "string") {
                t = e;
                e = null;
            }
            if (!(e && typeof e == "object")) {
                e = r.newBuilder();
            }
            if (typeof A == "string") {
                A = JSON.parse(A);
            }
            e.import(A, t);
            e.resolveAll();
            return e;
        };
        r.loadJsonFile = function (A, e, t) {
            if (e && typeof e == "object") {
                t = e;
                e = null;
            } else if (!(e && typeof e == "function")) {
                e = null;
            }
            if (e) {
                return r.Util.fetch(typeof A == "string" ? A : A.root + "/" + A.file, function (i) {
                    if (i !== null) {
                        try {
                            e(null, r.loadJson(JSON.parse(i), t, A));
                        } catch (A) {
                            e(A);
                        }
                    } else {
                        e(Error("Failed to fetch file"));
                    }
                });
            }
            var i = r.Util.fetch(typeof A == "object" ? A.root + "/" + A.file : A);
            if (i === null) {
                return null;
            } else {
                return r.loadJson(JSON.parse(i), t, A);
            }
        };
        return r;
    });
    (function () {
        "use strict";

        function A (A) {
            if (A === undefined || !(A instanceof ArrayBuffer) || A.byteLength != 32) {
                throw new Error("Invalid private key");
            }
        }

        function t (A) {
            if (A === undefined || (A.byteLength != 33 || new Uint8Array(A)[0] != 5) && A.byteLength != 32) {
                throw new Error("Invalid public key");
            }
            if (A.byteLength == 33) {
                return A.slice(1);
            } else {
                __LOG__(4)`libsignal: WARNING: Expected pubkey of length 33, please report the ST and client that generated the pubkey`;
                return A;
            }
        }

        function i (A) {
            var e = new Uint8Array(A.pubKey);
            var t = new Uint8Array(33);
            t.set(e, 1);
            t[0] = 5;
            return {
                pubKey: t.buffer,
                privKey: A.privKey
            };
        }

        function r (e) {
            return {
                createKeyPair: function (t) {
                    A(t);
                    var r = e.keyPair(t);
                    if (r instanceof Promise) {
                        return r.then(i);
                    } else {
                        return i(r);
                    }
                },
                ECDHE: function (i, r) {
                    i = t(i);
                    A(r);
                    if (i === undefined || i.byteLength != 32) {
                        throw new Error("Invalid public key");
                    }
                    return e.sharedSecret(i, r);
                },
                Ed25519Sign: function (t, i) {
                    A(t);
                    if (i === undefined) {
                        throw new Error("Invalid message");
                    }
                    return e.sign(t, i);
                },
                Ed25519Verify: function (A, i, r) {
                    if ((A = t(A)) === undefined || A.byteLength != 32) {
                        throw new Error("Invalid public key");
                    }
                    if (i === undefined) {
                        throw new Error("Invalid message");
                    }
                    if (r === undefined || r.byteLength != 64) {
                        throw new Error("Invalid signature");
                    }
                    return e.verify(A, i, r);
                }
            };
        }

        function n (A) {
            return {
                generateKeyPair: function () {
                    var t = e.crypto.getRandomBytes(32);
                    return A.createKeyPair(t);
                },
                createKeyPair: function (e) {
                    return A.createKeyPair(e);
                },
                calculateAgreement: function (e, t) {
                    return A.ECDHE(e, t);
                },
                verifySignature: function (e, t, i) {
                    return A.Ed25519Verify(e, t, i);
                },
                calculateSignature: function (e, t) {
                    return A.Ed25519Sign(e, t);
                }
            };
        }
        e.Curve = r(e.curve25519);
        e.Curve.async = r(e.curve25519_async);
        libsignal.Curve = n(e.Curve);
        libsignal.Curve.async = n(e.Curve.async);
    })();
    e = e || {};
    (function () {
        "use strict";

        var A = window.crypto;
        if (!A || !A.subtle || typeof A.getRandomValues != "function") {
            throw new Error("WebCrypto not found");
        }
        e.crypto = {
            getRandomBytes: function (e) {
                var t = new Uint8Array(e);
                A.getRandomValues(t);
                return t.buffer;
            },
            getRandomValues: function (e) {
                return A.getRandomValues(e);
            },
            encrypt: function (e, t, i) {
                return A.subtle.importKey("raw", e, {
                    name: "AES-CBC"
                }, false, ["encrypt"]).then(function (e) {
                    return A.subtle.encrypt({
                        name: "AES-CBC",
                        iv: new Uint8Array(i)
                    }, e, t);
                });
            },
            decrypt: function (e, t, i) {
                return A.subtle.importKey("raw", e, {
                    name: "AES-CBC"
                }, false, ["decrypt"]).then(function (e) {
                    return A.subtle.decrypt({
                        name: "AES-CBC",
                        iv: new Uint8Array(i)
                    }, e, t);
                });
            },
            sign: function (e, t) {
                return A.subtle.importKey("raw", e, {
                    name: "HMAC",
                    hash: {
                        name: "SHA-256"
                    }
                }, false, ["sign"]).then(function (e) {
                    return A.subtle.sign({
                        name: "HMAC",
                        hash: "SHA-256"
                    }, e, t);
                });
            },
            hash: function (e) {
                return A.subtle.digest({
                    name: "SHA-512"
                }, e);
            },
            HKDF: function (A, t, i) {
                return e.crypto.sign(t, A).then(function (A) {
                    var t = new ArrayBuffer(i.byteLength + 1 + 32);
                    var r = new Uint8Array(t);
                    r.set(new Uint8Array(i), 32);
                    r[r.length - 1] = 1;
                    return e.crypto.sign(A, t.slice(32)).then(function (i) {
                        r.set(new Uint8Array(i));
                        r[r.length - 1] = 2;
                        return e.crypto.sign(A, t).then(function (n) {
                            r.set(new Uint8Array(n));
                            r[r.length - 1] = 3;
                            return e.crypto.sign(A, t).then(function (A) {
                                return [i, n, A];
                            });
                        });
                    });
                });
            },
            createKeyPair: function (A) {
                if (A === undefined) {
                    A = e.crypto.getRandomBytes(32);
                }
                return e.Curve.async.createKeyPair(A);
            },
            ECDHE: function (A, t) {
                return e.Curve.async.ECDHE(A, t);
            },
            Ed25519Sign: function (A, t) {
                return e.Curve.async.Ed25519Sign(A, t);
            },
            Ed25519Verify: function (A, t, i) {
                return e.Curve.async.Ed25519Verify(A, t, i);
            }
        };
        e.HKDF = function (A, t, i) {
            if (t.byteLength != 32) {
                throw new Error("Got salt of incorrect length");
            }
            return e.crypto.HKDF(A, t, EA.toArrayBuffer(i));
        };
        e.verifyMAC = function (A, t, i, r) {
            return e.crypto.sign(t, A).then(function (A) {
                if (i.byteLength != r || A.byteLength < r) {
                    throw new Error("Bad MAC length");
                }
                for (var e = new Uint8Array(A), t = new Uint8Array(i), n = 0, g = 0; g < i.byteLength; ++g) {
                    n |= e[g] ^ t[g];
                }
                if (n !== 0) {
                    throw new Error("Bad MAC");
                }
            });
        };
        libsignal.HKDF = {
            deriveSecrets: function (A, t, i) {
                return e.HKDF(A, t, i);
            }
        };
        libsignal.crypto = {
            encrypt: function (A, t, i) {
                return e.crypto.encrypt(A, t, i);
            },
            decrypt: function (A, t, i) {
                return e.crypto.decrypt(A, t, i);
            },
            calculateMAC: function (A, t) {
                return e.crypto.sign(A, t);
            },
            verifyMAC: function (A, t, i, r) {
                return e.verifyMAC(A, t, i, r);
            },
            getRandomBytes: function (A) {
                return e.crypto.getRandomBytes(A);
            }
        };
    })();
    var EA = function () {
        "use strict";

        var A = new ArrayBuffer().__proto__;
        return {
            toString: function (A) {
                if (typeof A == "string") {
                    return A;
                } else {
                    return new dcodeIO.ByteBuffer.wrap(A).toString("binary");
                }
            },
            toArrayBuffer: function (e) {
                if (e !== undefined) {
                    if (e === Object(e) && e.__proto__ == A) {
                        return e;
                    }
                    if (typeof e != "string") {
                        throw new Error("Tried to convert a non-string of type " + typeof e + " to an array buffer");
                    }
                    return new dcodeIO.ByteBuffer.wrap(e, "binary").toArrayBuffer();
                }
            },
            isEqual: function (A, e) {
                if (A === undefined || e === undefined) {
                    return false;
                }
                A = EA.toString(A);
                e = EA.toString(e);
                var t = Math.max(A.length, e.length);
                if (t < 5) {
                    throw new Error("a/b compare too short");
                }
                return A.substring(0, Math.min(t, A.length)) == e.substring(0, Math.min(t, e.length));
            }
        };
    }();

    function uA (A) {
        return typeof A == "number" && A % 1 == 0 && A >= 0;
    }
    var QA = {
        generateIdentityKeyPair: function () {
            return e.crypto.createKeyPair();
        },
        generateSenderKey: () => e.crypto.getRandomBytes(32),
        generateSenderKeyId () {
            const A = e.crypto.getRandomValues(new Int32Array(1))[0];
            if (A >= 0) {
                return A;
            } else {
                return 1 + ~A;
            }
        },
        generateRegistrationId: function () {
            return new Uint16Array(e.crypto.getRandomBytes(2))[0] & 16383;
        },
        generateSignedPreKey: function (A, t) {
            if (!(A.privKey instanceof ArrayBuffer && A.privKey.byteLength == 32 && A.pubKey instanceof ArrayBuffer && A.pubKey.byteLength == 33)) {
                throw new TypeError("Invalid argument for identityKeyPair");
            }
            if (!uA(t)) {
                throw new TypeError("Invalid argument for signedKeyId: " + t);
            }
            return e.crypto.createKeyPair().then(function (i) {
                return e.crypto.Ed25519Sign(A.privKey, i.pubKey).then(function (A) {
                    return {
                        keyId: t,
                        keyPair: i,
                        signature: A
                    };
                });
            });
        },
        generatePreKey: function (A) {
            if (!uA(A)) {
                throw new TypeError("Invalid argument for keyId: " + A);
            }
            return e.crypto.createKeyPair().then(function (e) {
                return {
                    keyId: A,
                    keyPair: e
                };
            });
        }
    };

    function cA (A, e) {
        this.name = A;
        this.deviceId = e;
    }

    function lA (A, e) {
        this.remoteAddress = e;
        this.storage = A;
    }

    function wA (A, e) {
        this.remoteAddress = e;
        this.storage = A;
    }

    function yA (A, e, t) {
        this.remoteAddress = e;
        this.groupId = t;
        this.storage = A;
    }

    function dA (A, e, t) {
        this.remoteAddress = t;
        this.groupId = e;
        this.storage = A;
    }

    function pA (A, e) {
        this.remoteAddress = e;
        this.storage = A;
    }
    libsignal.KeyHelper = QA;
    (e = e || {}).protoText = {
        "protos/WhisperTextProtocol.proto": "package textsecure;\noption java_package = \"org.whispersystems.libsignal.protocol\";\noption java_outer_classname = \"WhisperProtos\";\nmessage WhisperMessage {\n  optional bytes  ephemeralKey    = 1;\n  optional uint32 counter         = 2;\n  optional uint32 previousCounter = 3;\n  optional bytes  ciphertext      = 4; // PushMessageContent\n}\nmessage PreKeyWhisperMessage {\n  optional uint32 registrationId = 5;\n  optional uint32 preKeyId       = 1;\n  optional uint32 signedPreKeyId = 6;\n  optional bytes  baseKey        = 2;\n  optional bytes  identityKey    = 3;\n  optional bytes  message        = 4; // WhisperMessage\n}\nmessage KeyExchangeMessage {\n  optional uint32 id               = 1;\n  optional bytes  baseKey          = 2;\n  optional bytes  ephemeralKey     = 3;\n  optional bytes  identityKey      = 4;\n  optional bytes  baseKeySignature = 5;\n}\n// https://github.com/signalapp/libsignal-protocol-java/blob/master/protobuf/WhisperTextProtocol.proto#L30\nmessage SenderKeyMessage {\n  optional uint32 id         = 1;\n  optional uint32 iteration  = 2;\n  optional bytes  ciphertext = 3;\n}\n// https://github.com/signalapp/libsignal-protocol-java/blob/master/protobuf/WhisperTextProtocol.proto#L36\nmessage SenderKeyDistributionMessage {\n  optional uint32 id         = 1;\n  optional uint32 iteration  = 2;\n  optional bytes  chainKey   = 3;\n  optional bytes  signingKey = 4;\n}\n"
    };
    (e = e || {}).protobuf = function () {
        "use strict";

        "WhisperTextProtocol.proto";
        var A = dcodeIO.ProtoBuf.loadProto(e.protoText["protos/WhisperTextProtocol.proto"]).build("textsecure");
        return {
            WhisperMessage: A.WhisperMessage,
            PreKeyWhisperMessage: A.PreKeyWhisperMessage,
            SenderKeyMessage: A.SenderKeyMessage,
            SenderKeyDistributionMessage: A.SenderKeyDistributionMessage
        };
    }();
    libsignal.Protobuf = {
        PreKeyWhisperMessage: e.protobuf.PreKeyWhisperMessage
    };
    (e = e || {}).BaseKeyType = {
        OURS: 1,
        THEIRS: 2
    };
    e.ChainType = {
        SENDING: 1,
        RECEIVING: 2
    };
    e.SessionRecord = function () {
        "use strict";

        var A = [{
            version: "v1",
            migrate: function (A) {
                var e;
                var t = A.sessions;
                if (A.registrationId) {
                    for (e in t) {
                        if (!t[e].registrationId) {
                            t[e].registrationId = A.registrationId;
                        }
                    }
                } else {
                    for (e in t) {
                        if (t[e].indexInfo.closed === -1) {
                            __LOG__(2)`libsignal: V1 session storage migration error: registrationId`;
                        }
                    }
                }
            }
        }];
        var t = function () {
            this.sessions = {};
            this.version = "v1";
        };
        t.initRecordFromData = function (e) {
            if (e.version !== "v1") {
                (function (e) {
                    for (var t = e.version === undefined, i = 0; i < A.length; ++i) {
                        if (t) {
                            A[i].migrate(e);
                        } else if (A[i].version === e.version) {
                            t = true;
                        }
                    }
                    if (!t) {
                        throw new Error("Error migrating SessionRecord");
                    }
                })(e);
            }
            var i = new t();
            i.sessions = e.sessions;
            if (i.sessions === undefined || i.sessions === null || typeof i.sessions != "object" || Array.isArray(i.sessions)) {
                throw new Error("Error deserializing SessionRecord");
            }
            return i;
        };
        t.prototype = {
            prepareRecord: function () {
                return {
                    sessions: this.sessions,
                    version: this.version
                };
            },
            haveOpenSession: function () {
                var A = this.getOpenSession();
                return !!A && typeof A.registrationId == "number";
            },
            getSessionByBaseKey: function (A) {
                var t = this.sessions[EA.toString(A)];
                if (!t || t.indexInfo.baseKeyType !== e.BaseKeyType.OURS) {
                    return t;
                }
                __LOG__(2)`libsignal: Tried to lookup a session using our basekey`;
            },
            getSessionByRemoteEphemeralKey: function (A) {
                this.detectDuplicateOpenSessions();
                var e;
                var t = this.sessions;
                var i = EA.toString(A);
                for (var r in t) {
                    if (t[r].indexInfo.closed == -1) {
                        e = t[r];
                    }
                    if (t[r][i] !== undefined) {
                        return t[r];
                    }
                }
                if (e !== undefined) {
                    return e;
                }
            },
            getOpenSession: function () {
                var A = this.sessions;
                if (A !== undefined) {
                    this.detectDuplicateOpenSessions();
                    for (var e in A) {
                        if (A[e].indexInfo.closed == -1) {
                            return A[e];
                        }
                    }
                }
            },
            detectDuplicateOpenSessions: function () {
                var A;
                var e = this.sessions;
                for (var t in e) {
                    if (e[t].indexInfo.closed == -1) {
                        if (A !== undefined) {
                            throw new Error("Datastore inconsistensy: multiple open sessions");
                        }
                        A = e[t];
                    }
                }
            },
            updateSessionState: function (A) {
                var e = this.sessions;
                this.removeOldChains(A);
                e[EA.toString(A.indexInfo.baseKey)] = A;
                this.removeOldSessions();
            },
            getSessions: function () {
                var A;
                var e = [];
                for (var t in this.sessions) {
                    if (this.sessions[t].indexInfo.closed === -1) {
                        A = this.sessions[t];
                    } else {
                        e.push(this.sessions[t]);
                    }
                }
                e = e.sort(function (A, e) {
                    return A.indexInfo.closed - e.indexInfo.closed;
                });
                if (A) {
                    e.push(A);
                }
                return e;
            },
            archiveCurrentState: function () {
                var A = this.getOpenSession();
                if (A !== undefined) {
                    __LOG__(2)`libsignal: closing session`;
                    A.indexInfo.closed = Date.now();
                    this.updateSessionState(A);
                }
            },
            promoteState: function (A) {
                __LOG__(2)`libsignal: promoting session`;
                A.indexInfo.closed = -1;
            },
            removeOldChains: function (A) {
                for (; A.oldRatchetList.length > 10;) {
                    for (var e = 0, t = A.oldRatchetList[0], i = 0; i < A.oldRatchetList.length; i++) {
                        if (A.oldRatchetList[i].added < t.added) {
                            t = A.oldRatchetList[i];
                            e = i;
                        }
                    }
                    __LOG__(2)`libsignal: Deleting chain closed`;
                    delete A[EA.toString(t.ephemeralKey)];
                    A.oldRatchetList.splice(e, 1);
                }
            },
            removeOldSessions: function () {
                for (var A, e, t = this.sessions; Object.keys(t).length > 40;) {
                    for (var i in t) {
                        var r = t[i];
                        if (r.indexInfo.closed > -1 && (!e || r.indexInfo.closed < e.indexInfo.closed)) {
                            A = i;
                            e = r;
                        }
                    }
                    __LOG__(2)`libsignal: Deleting session closed at`;
                    delete t[EA.toString(A)];
                }
            },
            deleteAllSessions: function () {
                this.sessions = {};
            }
        };
        return t;
    }();
    cA.prototype = {
        getName: function () {
            return this.name;
        },
        getDeviceId: function () {
            return this.deviceId;
        },
        toString: function () {
            return this.name + "." + this.deviceId;
        },
        equals: function (A) {
            return A instanceof cA && A.name === this.name && A.deviceId === this.deviceId;
        }
    };
    libsignal.SignalProtocolAddress = function (A, e) {
        var t = new cA(A, e);
        ["getName", "getDeviceId", "toString", "equals"].forEach(function (A) {
            this[A] = t[A].bind(t);
        }.bind(this));
    };
    libsignal.SignalProtocolAddress.fromString = function (A) {
        if (typeof A != "string" || !A.match(/.*\.\d+/)) {
            throw new Error("Invalid SignalProtocolAddress string");
        }
        var e = A.split(".");
        return new libsignal.SignalProtocolAddress(e[0], parseInt(e[1]));
    };
    lA.prototype = {
        processPreKey: function (A) {
            return e.SessionLock.queueJobForNumber(this.remoteAddress.toString(), function () {
                return this.storage.isTrustedIdentity(this.remoteAddress.toString(), A.identityKey, this.storage.Direction.SENDING).then(function (t) {
                    if (!t) {
                        throw new Error("Identity key changed");
                    }
                    return e.crypto.Ed25519Verify(A.identityKey, A.signedPreKey.publicKey, A.signedPreKey.signature);
                }).then(function () {
                    return e.crypto.createKeyPair();
                }).then(function (e) {
                    var t;
                    if (A.preKey) {
                        t = A.preKey.publicKey;
                    }
                    return this.initSession(true, e, undefined, A.identityKey, t, A.signedPreKey.publicKey, A.registrationId).then(function (t) {
                        t.pendingPreKey = {
                            signedKeyId: A.signedPreKey.keyId,
                            baseKey: e.pubKey
                        };
                        if (A.preKey) {
                            t.pendingPreKey.preKeyId = A.preKey.keyId;
                        }
                        return t;
                    });
                }.bind(this)).then(function (A) {
                    var t = this.remoteAddress.toString();
                    return this.storage.loadSession(t).then(function (i) {
                        var r;
                        const n = (r = i !== undefined ? e.SessionRecord.initRecordFromData(i) : new e.SessionRecord()).getOpenSession();
                        r.archiveCurrentState();
                        if (n && A && !EA.isEqual(n.indexInfo.remoteIdentityKey, A.indexInfo.remoteIdentityKey)) {
                            __LOG__(2)`libsignal: processPreKey: deleting all sessions because identity has changed`;
                            r.deleteAllSessions();
                        }
                        r.updateSessionState(A);
                        return Promise.all([this.storage.storeSession(t, r.prepareRecord()), this.storage.saveIdentity(this.remoteAddress.toString(), A.indexInfo.remoteIdentityKey)]);
                    }.bind(this));
                }.bind(this));
            }.bind(this));
        },
        processV3: function (A, e) {
            var t;
            var i;
            var r;
            return this.storage.isTrustedIdentity(this.remoteAddress.toString(), e.identityKey.toArrayBuffer(), this.storage.Direction.RECEIVING).then(function (A) {
                if (!A) {
                    var r = new Error("Unknown identity key");
                    r.identityKey = e.identityKey.toArrayBuffer();
                    throw r;
                }
                return Promise.all([this.storage.loadPreKey(e.preKeyId), this.storage.loadSignedPreKey(e.signedPreKeyId)]).then(function (A) {
                    t = A[0];
                    i = A[1];
                });
            }.bind(this)).then(function () {
                if (!(r = A.getSessionByBaseKey(e.baseKey))) {
                    r = A.getOpenSession();
                    if (i === undefined) {
                        if (r !== undefined && r.currentRatchet !== undefined) {
                            return;
                        }
                        throw new Error("Missing Signed PreKey for PreKeyWhisperMessage");
                    }
                    if (r !== undefined) {
                        A.archiveCurrentState();
                    }
                    if (e.preKeyId && !t) {
                        __LOG__(2)`libsignal: Invalid prekey id`;
                    }
                    return this.initSession(false, t, i, e.identityKey.toArrayBuffer(), e.baseKey.toArrayBuffer(), undefined, e.registrationId).then(function (t) {
                        if (r && t && !EA.isEqual(r.indexInfo.remoteIdentityKey, t.indexInfo.remoteIdentityKey)) {
                            __LOG__(2)`libsignal: deleting all sessions because identity has changed`;
                            A.deleteAllSessions();
                        }
                        A.updateSessionState(t);
                        return this.storage.saveIdentity(this.remoteAddress.toString(), e.identityKey.toArrayBuffer()).then(function () {
                            return e.preKeyId;
                        });
                    }.bind(this));
                }
            }.bind(this));
        },
        initSession: function (A, t, i, r, n, g, o) {
            return this.storage.getIdentityKeyPair().then(function (I) {
                if (A) {
                    if (i !== undefined) {
                        throw new Error("Invalid call to initSession");
                    }
                    i = t;
                } else {
                    if (g !== undefined) {
                        throw new Error("Invalid call to initSession");
                    }
                    g = n;
                }
                var s;
                s = t === undefined || n === undefined ? new Uint8Array(128) : new Uint8Array(160);
                for (var f = 0; f < 32; f++) {
                    s[f] = 255;
                }
                return Promise.all([e.crypto.ECDHE(g, I.privKey), e.crypto.ECDHE(r, i.privKey), e.crypto.ECDHE(g, i.privKey)]).then(function (i) {
                    if (A) {
                        s.set(new Uint8Array(i[0]), 32);
                        s.set(new Uint8Array(i[1]), 64);
                    } else {
                        s.set(new Uint8Array(i[0]), 64);
                        s.set(new Uint8Array(i[1]), 32);
                    }
                    s.set(new Uint8Array(i[2]), 96);
                    if (t !== undefined && n !== undefined) {
                        return e.crypto.ECDHE(n, t.privKey).then(function (A) {
                            s.set(new Uint8Array(A), 128);
                        });
                    }
                }).then(function () {
                    return e.HKDF(s.buffer, new ArrayBuffer(32), "WhisperText");
                }).then(function (I) {
                    var s = {
                        registrationId: o,
                        currentRatchet: {
                            rootKey: I[0],
                            lastRemoteEphemeralKey: g,
                            previousCounter: 0
                        },
                        indexInfo: {
                            remoteIdentityKey: r,
                            closed: -1
                        },
                        oldRatchetList: []
                    };
                    if (A) {
                        s.indexInfo.baseKey = t.pubKey;
                        s.indexInfo.baseKeyType = e.BaseKeyType.OURS;
                        return e.crypto.createKeyPair().then(function (A) {
                            s.currentRatchet.ephemeralKeyPair = A;
                            return this.calculateSendingRatchet(s, g).then(function () {
                                return s;
                            });
                        }.bind(this));
                    } else {
                        s.indexInfo.baseKey = n;
                        s.indexInfo.baseKeyType = e.BaseKeyType.THEIRS;
                        s.currentRatchet.ephemeralKeyPair = i;
                        return s;
                    }
                }.bind(this));
            }.bind(this));
        },
        calculateSendingRatchet: function (A, t) {
            var i = A.currentRatchet;
            return e.crypto.ECDHE(t, EA.toArrayBuffer(i.ephemeralKeyPair.privKey)).then(function (A) {
                return e.HKDF(A, EA.toArrayBuffer(i.rootKey), "WhisperRatchet");
            }).then(function (t) {
                A[EA.toString(i.ephemeralKeyPair.pubKey)] = {
                    messageKeys: {},
                    chainKey: {
                        counter: -1,
                        key: t[1]
                    },
                    chainType: e.ChainType.SENDING
                };
                i.rootKey = t[0];
            });
        }
    };
    libsignal.SessionBuilder = function (A, e) {
        var t = new lA(A, e);
        this.processPreKey = t.processPreKey.bind(t);
        this.processV3 = t.processV3.bind(t);
    };
    wA.prototype = {
        getRecord: function (A) {
            return this.storage.loadSession(A).then(function (A) {
                if (A !== undefined) {
                    return e.SessionRecord.initRecordFromData(A);
                }
            });
        },
        encrypt: function (A, t) {
            A = dcodeIO.ByteBuffer.wrap(A, t).toArrayBuffer();
            return e.SessionLock.queueJobForNumber(this.remoteAddress.toString(), function () {
                if (!(A instanceof ArrayBuffer)) {
                    throw new Error("Expected buffer to be an ArrayBuffer");
                }
                var t;
                var i;
                var r;
                var n;
                var g;
                var o = this.remoteAddress.toString();
                var I = new e.protobuf.WhisperMessage();
                return Promise.all([this.storage.getIdentityKeyPair(), this.storage.getLocalRegistrationId(), this.getRecord(o)]).then(function (A) {
                    t = A[0];
                    i = A[1];
                    if (!(r = A[2])) {
                        throw new Error("No record for " + o);
                    }
                    if (!(n = r.getOpenSession())) {
                        throw new Error("No session to encrypt message for " + o);
                    }
                    I.ephemeralKey = EA.toArrayBuffer(n.currentRatchet.ephemeralKeyPair.pubKey);
                    if ((g = n[EA.toString(I.ephemeralKey)]).chainType === e.ChainType.RECEIVING) {
                        throw new Error("Tried to encrypt on a receiving chain");
                    }
                    return this.fillMessageKeys(g, g.chainKey.counter + 1);
                }.bind(this)).then(function () {
                    return e.HKDF(EA.toArrayBuffer(g.messageKeys[g.chainKey.counter]), new ArrayBuffer(32), "WhisperMessageKeys");
                }).then(function (i) {
                    delete g.messageKeys[g.chainKey.counter];
                    I.counter = g.chainKey.counter;
                    I.previousCounter = n.currentRatchet.previousCounter;
                    return e.crypto.encrypt(i[0], A, i[2].slice(0, 16)).then(function (A) {
                        I.ciphertext = A;
                        var g = I.toArrayBuffer();
                        var s = new Uint8Array(g.byteLength + 66 + 1);
                        s.set(new Uint8Array(EA.toArrayBuffer(t.pubKey)));
                        s.set(new Uint8Array(EA.toArrayBuffer(n.indexInfo.remoteIdentityKey)), 33);
                        s[66] = 51;
                        s.set(new Uint8Array(g), 67);
                        return e.crypto.sign(i[1], s.buffer).then(function (A) {
                            var e = new Uint8Array(g.byteLength + 9);
                            e[0] = 51;
                            e.set(new Uint8Array(g), 1);
                            e.set(new Uint8Array(A, 0, 8), g.byteLength + 1);
                            return this.storage.isTrustedIdentity(this.remoteAddress.toString(), EA.toArrayBuffer(n.indexInfo.remoteIdentityKey), this.storage.Direction.SENDING).then(function (A) {
                                if (!A) {
                                    throw new Error("Identity key changed");
                                }
                            }).then(function () {
                                return this.storage.saveIdentity(this.remoteAddress.toString(), n.indexInfo.remoteIdentityKey);
                            }.bind(this)).then(function () {
                                r.updateSessionState(n);
                                return this.storage.storeSession(o, r.prepareRecord()).then(function () {
                                    return e;
                                });
                            }.bind(this));
                        }.bind(this));
                    }.bind(this));
                }.bind(this)).then(function (A) {
                    if (n.pendingPreKey !== undefined) {
                        var r = new e.protobuf.PreKeyWhisperMessage();
                        r.identityKey = EA.toArrayBuffer(t.pubKey);
                        r.registrationId = i;
                        r.baseKey = EA.toArrayBuffer(n.pendingPreKey.baseKey);
                        if (n.pendingPreKey.preKeyId) {
                            r.preKeyId = n.pendingPreKey.preKeyId;
                        }
                        r.signedPreKeyId = n.pendingPreKey.signedKeyId;
                        r.message = A;
                        return {
                            type: 3,
                            body: String.fromCharCode(51) + EA.toString(r.encode()),
                            registrationId: n.registrationId
                        };
                    }
                    return {
                        type: 1,
                        body: EA.toString(A),
                        registrationId: n.registrationId
                    };
                });
            }.bind(this));
        },
        decryptWithSessionList: function (A, e, t) {
            if (e.length === 0) {
                return Promise.reject(t[0]);
            }
            var i = e.pop();
            return this.doDecryptWhisperMessage(A, i).then(function (A) {
                return {
                    plaintext: A,
                    session: i
                };
            }).catch(function (i) {
                if (i.name === "MessageCounterError") {
                    return Promise.reject(i);
                } else {
                    t.push(i);
                    return this.decryptWithSessionList(A, e, t);
                }
            }.bind(this));
        },
        decryptWhisperMessage: function (A, t) {
            A = dcodeIO.ByteBuffer.wrap(A, t).toArrayBuffer();
            return e.SessionLock.queueJobForNumber(this.remoteAddress.toString(), function () {
                var e = this.remoteAddress.toString();
                return this.getRecord(e).then(function (t) {
                    if (!t) {
                        throw new Error("No record for device " + e);
                    }
                    return this.decryptWithSessionList(A, t.getSessions(), []).then(function (A) {
                        return this.getRecord(e).then(function (t) {
                            if (A.session.indexInfo.baseKey !== t.getOpenSession().indexInfo.baseKey) {
                                t.archiveCurrentState();
                                t.promoteState(A.session);
                            }
                            return this.storage.isTrustedIdentity(this.remoteAddress.getName(), EA.toArrayBuffer(A.session.indexInfo.remoteIdentityKey), this.storage.Direction.RECEIVING).then(function (A) {
                                if (!A) {
                                    throw new Error("Identity key changed");
                                }
                            }).then(function () {
                                return this.storage.saveIdentity(this.remoteAddress.toString(), A.session.indexInfo.remoteIdentityKey);
                            }.bind(this)).then(function () {
                                t.updateSessionState(A.session);
                                return this.storage.storeSession(e, t.prepareRecord()).then(function () {
                                    return A.plaintext;
                                });
                            }.bind(this));
                        }.bind(this));
                    }.bind(this));
                }.bind(this));
            }.bind(this));
        },
        decryptPreKeyWhisperMessage: function (A, t) {
            var i = (A = dcodeIO.ByteBuffer.wrap(A, t)).readUint8();
            if ((i & 15) > 3 || i >> 4 < 3) {
                throw new Error("Incompatible version number on PreKeyWhisperMessage");
            }
            return e.SessionLock.queueJobForNumber(this.remoteAddress.toString(), function () {
                var t = this.remoteAddress.toString();
                return this.getRecord(t).then(function (i) {
                    var r = e.protobuf.PreKeyWhisperMessage.decode(A);
                    if (!i) {
                        if (r.registrationId === undefined) {
                            throw new Error("No registrationId");
                        }
                        i = new e.SessionRecord(r.registrationId);
                    }
                    return new lA(this.storage, this.remoteAddress).processV3(i, r).then(function (A) {
                        var e = i.getSessionByBaseKey(r.baseKey);
                        return this.doDecryptWhisperMessage(r.message.toArrayBuffer(), e).then(function (A) {
                            i.updateSessionState(e);
                            var r = i.getOpenSession();
                            if (e && r && !EA.isEqual(e.indexInfo.remoteIdentityKey, r.indexInfo.remoteIdentityKey)) {
                                __LOG__(2)`libsignal: promote the old session and update identity`;
                                i.archiveCurrentState();
                                i.promoteState(e);
                                return this.storage.saveIdentity(t, e.indexInfo.remoteIdentityKey).then(function () {
                                    return A;
                                });
                            } else {
                                return A;
                            }
                        }.bind(this)).then(function (e) {
                            return this.storage.storeSession(t, i.prepareRecord()).then(function () {
                                if (A != null) {
                                    return this.storage.removePreKey(A);
                                }
                            }.bind(this)).then(function () {
                                return e;
                            });
                        }.bind(this));
                    }.bind(this));
                }.bind(this));
            }.bind(this));
        },
        doDecryptWhisperMessage: function (A, t) {
            if (!(A instanceof ArrayBuffer)) {
                throw new Error("Expected messageBytes to be an ArrayBuffer");
            }
            var i = new Uint8Array(A)[0];
            if ((i & 15) > 3 || i >> 4 < 3) {
                throw new Error("Incompatible version number on WhisperMessage");
            }
            var r = A.slice(1, A.byteLength - 8);
            var n = A.slice(A.byteLength - 8, A.byteLength);
            var g = e.protobuf.WhisperMessage.decode(r);
            var o = g.ephemeralKey.toArrayBuffer();
            if (t === undefined) {
                return Promise.reject(new Error("No session found to decrypt message from " + this.remoteAddress.toString()));
            } else {
                if (t.indexInfo.closed != -1) {
                    __LOG__(2)`libsignal: decrypting message for closed session`;
                }
                return this.maybeStepRatchet(t, o, g.previousCounter).then(function () {
                    var A = t[EA.toString(g.ephemeralKey)];
                    if (A.chainType === e.ChainType.SENDING) {
                        throw new Error("Tried to decrypt on a sending chain");
                    }
                    return this.fillMessageKeys(A, g.counter).then(function () {
                        var t = A.messageKeys[g.counter];
                        if (t === undefined) {
                            var i = new Error("Message key not found. The counter was repeated or the key was not filled.");
                            i.name = "MessageCounterError";
                            throw i;
                        }
                        delete A.messageKeys[g.counter];
                        return e.HKDF(EA.toArrayBuffer(t), new ArrayBuffer(32), "WhisperMessageKeys");
                    });
                }.bind(this)).then(function (A) {
                    return this.storage.getIdentityKeyPair().then(function (i) {
                        var g = new Uint8Array(r.byteLength + 66 + 1);
                        g.set(new Uint8Array(EA.toArrayBuffer(t.indexInfo.remoteIdentityKey)));
                        g.set(new Uint8Array(EA.toArrayBuffer(i.pubKey)), 33);
                        g[66] = 51;
                        g.set(new Uint8Array(r), 67);
                        return e.verifyMAC(g.buffer, A[1], n, 8);
                    }.bind(this)).then(function () {
                        return e.crypto.decrypt(A[0], g.ciphertext.toArrayBuffer(), A[2].slice(0, 16));
                    });
                }.bind(this)).then(function (A) {
                    delete t.pendingPreKey;
                    return A;
                });
            }
        },
        fillMessageKeys: function (A, t) {
            if (A.chainKey.counter >= t) {
                return Promise.resolve();
            }
            if (t - A.chainKey.counter > 2000) {
                throw new Error("Over 2000 messages into the future!");
            }
            if (A.chainKey.key === undefined) {
                throw new Error("Got invalid request to extend chain after it was already closed");
            }
            var i = EA.toArrayBuffer(A.chainKey.key);
            var r = new Uint8Array(1);
            r[0] = 1;
            return e.crypto.sign(i, r.buffer).then(function (n) {
                r[0] = 2;
                return e.crypto.sign(i, r.buffer).then(function (e) {
                    A.messageKeys[A.chainKey.counter + 1] = n;
                    A.chainKey.key = e;
                    A.chainKey.counter += 1;
                    return this.fillMessageKeys(A, t);
                }.bind(this));
            }.bind(this));
        },
        maybeStepRatchet: function (A, t, i) {
            if (A[EA.toString(t)] !== undefined) {
                return Promise.resolve();
            }
            __LOG__(2)`libsignal: New remote ephemeral key`;
            var r = A.currentRatchet;
            return Promise.resolve().then(function () {
                var e = A[EA.toString(r.lastRemoteEphemeralKey)];
                if (e !== undefined) {
                    return this.fillMessageKeys(e, i).then(function () {
                        delete e.chainKey.key;
                        A.oldRatchetList[A.oldRatchetList.length] = {
                            added: Date.now(),
                            ephemeralKey: r.lastRemoteEphemeralKey
                        };
                    });
                }
            }.bind(this)).then(function () {
                return this.calculateRatchet(A, t, false).then(function () {
                    var i = EA.toString(r.ephemeralKeyPair.pubKey);
                    if (A[i] !== undefined) {
                        r.previousCounter = A[i].chainKey.counter;
                        delete A[i];
                    }
                    return e.crypto.createKeyPair().then(function (e) {
                        r.ephemeralKeyPair = e;
                        return this.calculateRatchet(A, t, true).then(function () {
                            r.lastRemoteEphemeralKey = t;
                        }.bind(this));
                    }.bind(this));
                }.bind(this));
            }.bind(this));
        },
        calculateRatchet: function (A, t, i) {
            var r = A.currentRatchet;
            return e.crypto.ECDHE(t, EA.toArrayBuffer(r.ephemeralKeyPair.privKey)).then(function (n) {
                return e.HKDF(n, EA.toArrayBuffer(r.rootKey), "WhisperRatchet").then(function (n) {
                    var g;
                    g = i ? r.ephemeralKeyPair.pubKey : t;
                    A[EA.toString(g)] = {
                        messageKeys: {},
                        chainKey: {
                            counter: -1,
                            key: n[1]
                        },
                        chainType: i ? e.ChainType.SENDING : e.ChainType.RECEIVING
                    };
                    r.rootKey = n[0];
                });
            });
        },
        getRemoteRegistrationId: function () {
            return e.SessionLock.queueJobForNumber(this.remoteAddress.toString(), function () {
                return this.getRecord(this.remoteAddress.toString()).then(function (A) {
                    if (A !== undefined) {
                        var e = A.getOpenSession();
                        if (e === undefined) {
                            return null;
                        } else {
                            return e.registrationId;
                        }
                    }
                });
            }.bind(this));
        },
        hasOpenSession: function () {
            return e.SessionLock.queueJobForNumber(this.remoteAddress.toString(), function () {
                return this.getRecord(this.remoteAddress.toString()).then(function (A) {
                    return A !== undefined && A.haveOpenSession();
                });
            }.bind(this));
        },
        closeOpenSessionForDevice: function () {
            var A = this.remoteAddress.toString();
            return e.SessionLock.queueJobForNumber(A, function () {
                return this.getRecord(A).then(function (e) {
                    if (e !== undefined && e.getOpenSession() !== undefined) {
                        e.archiveCurrentState();
                        return this.storage.storeSession(A, e.prepareRecord());
                    }
                }.bind(this));
            }.bind(this));
        },
        deleteAllSessionsForDevice: function () {
            var A = this.remoteAddress.toString();
            return e.SessionLock.queueJobForNumber(A, function () {
                return this.getRecord(A).then(function (e) {
                    if (e !== undefined) {
                        e.deleteAllSessions();
                        return this.storage.storeSession(A, e.prepareRecord());
                    }
                }.bind(this));
            }.bind(this));
        }
    };
    libsignal.SessionCipher = function (A, e) {
        var t = new wA(A, e);
        this.encrypt = t.encrypt.bind(t);
        this.decryptPreKeyWhisperMessage = t.decryptPreKeyWhisperMessage.bind(t);
        this.decryptWhisperMessage = t.decryptWhisperMessage.bind(t);
        this.getRemoteRegistrationId = t.getRemoteRegistrationId.bind(t);
        this.hasOpenSession = t.hasOpenSession.bind(t);
        this.closeOpenSessionForDevice = t.closeOpenSessionForDevice.bind(t);
        this.deleteAllSessionsForDevice = t.deleteAllSessionsForDevice.bind(t);
    };
    (function () {
        "use strict";

        e.SessionLock = {};
        var A = {};
        e.SessionLock.queueJobForNumber = function (e, t) {
            var i = A[e] || Promise.resolve();
            var r = A[e] = i.then(t, t);
            var n = function () {
                if (A[e] === r) {
                    delete A[e];
                }
            };
            r.then(n, n);
            return r;
        };
    })();
    (function () {
        function A (A, e) {
            for (var t = ((A[e] * Math.pow(2, 32) + A[e + 1] * Math.pow(2, 24) + A[e + 2] * Math.pow(2, 16) + A[e + 3] * Math.pow(2, 8) + A[e + 4]) % 100000).toString(); t.length < 5;) {
                t = "0" + t;
            }
            return t;
        }

        function t (t, i, r) {
            return function A (t, i, r) {
                t = dcodeIO.ByteBuffer.concat([t, i]).toArrayBuffer();
                return e.crypto.hash(t).then(function (e) {
                    if (--r == 0) {
                        return e;
                    } else {
                        return A(e, i, r);
                    }
                });
            }(dcodeIO.ByteBuffer.concat([(0, new Uint16Array([0]).buffer), i, t]).toArrayBuffer(), i, r).then(function (e) {
                return A(e = new Uint8Array(e), 0) + A(e, 5) + A(e, 10) + A(e, 15) + A(e, 20) + A(e, 25);
            });
        }
        libsignal.FingerprintGenerator = function (A) {
            this.iterations = A;
        };
        libsignal.FingerprintGenerator.prototype = {
            createFor: function (A, e, i, r) {
                if (!(typeof A == "string" && typeof i == "string" && e instanceof ArrayBuffer && r instanceof ArrayBuffer)) {
                    throw new Error("Invalid arguments");
                }
                return Promise.all([t(A, e, this.iterations), t(i, r, this.iterations)]).then(function (A) {
                    return A.sort().join("");
                });
            }
        };
    })();
    (e = e || {}).SenderKeyRecord = function () {
        "use strict";

        var A = function () {
            this.sessions = [];
            this.version = "v1";
        };
        A.initRecordFromData = function (e) {
            if (e.version !== "v1") {
                (function (A) {
                    throw new Error("Error migrating GroupSessionRecord");
                })();
            }
            var t = new A();
            t.sessions = e.sessions;
            return t;
        };
        A.prototype = {
            prepareRecord: function () {
                return {
                    sessions: this.sessions,
                    version: this.version
                };
            },
            makeSenderKeyRecord: function (A, e, t, i) {
                return {
                    keyId: A,
                    signatureKey: i,
                    chainKey: {
                        counter: e,
                        key: t
                    },
                    messageKeys: []
                };
            },
            addSenderKeyState: function (A, e, t, i) {
                this.sessions.push(this.makeSenderKeyRecord(A, e, t, i));
                if (this.sessions.length > 5) {
                    this.sessions = this.sessions.slice(1);
                }
            },
            getSenderKeyDistMsgData: function () {
                var A = this.sessions[this.sessions.length - 1];
                return {
                    id: A.keyId,
                    iteration: A.chainKey.counter,
                    chainKey: A.chainKey.key,
                    signingKey: A.signatureKey.pubKey
                };
            },
            getSession: function (A) {
                for (var e = 0; e < this.sessions.length; e++) {
                    if (this.sessions[e].keyId === A) {
                        return this.sessions[e];
                    }
                }
            },
            getOpenSession: function () {
                return this.sessions[this.sessions.length - 1];
            },
            deleteAllSessions: function () {
                this.sessions = {};
            }
        };
        return A;
    }();
    yA.prototype = {
        process: function (A, e, t) {
            e.addSenderKeyState(t.id, t.iteration, dcodeIO.ByteBuffer.wrap(t.chainKey).toArrayBuffer(), dcodeIO.ByteBuffer.wrap(t.signingKey).toArrayBuffer());
            return this.storage.storeSenderKey(A, e.prepareRecord());
        },
        create: function (A) {
            var t = `${this.groupId}::${this.remoteAddress.toString()}`;
            if (A.sessions.length == 0) {
                A.addSenderKeyState(libsignal.KeyHelper.generateSenderKeyId(), 0, libsignal.KeyHelper.generateSenderKey(), libsignal.Curve.generateKeyPair());
            }
            var i = A.getSenderKeyDistMsgData();
            var r = new e.protobuf.SenderKeyDistributionMessage();
            r.id = i.id;
            r.iteration = i.iteration;
            r.chainKey = EA.toArrayBuffer(i.chainKey);
            r.signingKey = EA.toArrayBuffer(i.signingKey);
            var n = r.encodeAB();
            var g = new Uint8Array(n.byteLength + 1);
            g[0] = 51;
            g.set(new Uint8Array(n), 1);
            return this.storage.storeSenderKey(t, A.prepareRecord()).then(function () {
                return g;
            });
        }
    };
    libsignal.GroupSessionBuilder = function (A, e, t) {
        var i = new yA(A, e, t);
        this.process = i.process.bind(i);
    };
    (function () {
        "use strict";

        e.GroupSessionLock = {};
        var A = {};
        e.GroupSessionLock.queueJobForNumber = function (e, t) {
            var i = A[e] || Promise.resolve();
            var r = A[e] = i.then(t, t);
            var n = function () {
                if (A[e] === r) {
                    delete A[e];
                }
            };
            r.then(n, n);
            return r;
        };
    })();
    dA.prototype = {
        getRecord: function () {
            return this.storage.loadSenderKey(this.getSenderKeyName()).then(function (A) {
                if (A !== undefined) {
                    return e.SenderKeyRecord.initRecordFromData(A);
                }
            });
        },
        hkdkOutputToSymmetricMaterial (A, e) {
            var t = new Uint8Array(32);
            t.set(new Uint8Array(A.slice(16)));
            t.set(new Uint8Array(e.slice(0, 16)), 16);
            return {
                key: t.buffer,
                iv: A.slice(0, 16)
            };
        },
        getSenderKeyName: function () {
            return `${this.groupId}::${this.remoteAddress.toString()}`;
        },
        encrypt: function (A) {
            A = dcodeIO.ByteBuffer.wrap(A).toArrayBuffer();
            return e.GroupSessionLock.queueJobForNumber(this.getSenderKeyName(), function () {
                return this.getRecord().then(function (t) {
                    if (t === undefined) {
                        throw new Error("No session senderKeyRecord");
                    }
                    var i = t.getOpenSession();
                    if (!i) {
                        throw new Error("No session to encrypt message for " + address);
                    }
                    var r = new e.protobuf.SenderKeyMessage();
                    var n = i.chainKey.counter === 0 ? 0 : i.chainKey.counter + 1;
                    return this.fillMessageKeys(i, n).then(function () {
                        var A = i.messageKeys[n];
                        r.id = i.keyId;
                        r.iteration = n;
                        delete i.messageKeys[n];
                        return e.HKDF(EA.toArrayBuffer(A), new ArrayBuffer(32), "WhisperGroup");
                    }.bind(this)).then(function (n) {
                        var g = this.hkdkOutputToSymmetricMaterial(n[0], n[1]);
                        return e.crypto.encrypt(g.key, A, g.iv).then(function (A) {
                            r.ciphertext = A;
                            var n = r.toArrayBuffer();
                            var g = new Uint8Array(n.byteLength + 1);
                            g[0] = 51;
                            g.set(new Uint8Array(n), 1);
                            var o = EA.toArrayBuffer(i.signatureKey.privKey);
                            return e.crypto.Ed25519Sign(o, g.buffer).then(function (A) {
                                var e = new Uint8Array(n.byteLength + 65);
                                e[0] = 51;
                                e.set(new Uint8Array(n), 1);
                                e.set(new Uint8Array(A, 0, 64), n.byteLength + 1);
                                return this.storage.storeSenderKey(this.getSenderKeyName(), t.prepareRecord()).then(function () {
                                    return e;
                                });
                            }.bind(this));
                        }.bind(this));
                    }.bind(this)).then(function (A) {
                        return EA.toString(A);
                    }.bind(this));
                }.bind(this));
            }.bind(this));
        },
        decryptSenderKeyMessage: function (A, t) {
            A = dcodeIO.ByteBuffer.wrap(A, t).toArrayBuffer();
            var i = new Uint8Array(A)[0];
            if ((i & 15) > 3 || i >> 4 < 3) {
                throw new Error("Incompatible version number on SenderKeyMessage");
            }
            var r = A.slice(1, A.byteLength - 64);
            var n = A.slice(0, A.byteLength - 64);
            var g = A.slice(A.byteLength - 64);
            var o = e.protobuf.SenderKeyMessage.decode(r);
            var I = o.id;
            return e.GroupSessionLock.queueJobForNumber(this.getSenderKeyName(), function () {
                return this.getRecord().then(function (A) {
                    if (A === undefined) {
                        return Promise.reject(new Error("No session found to decrypt message from " + this.remoteAddress.toString()));
                    }
                    var t = A.getSession(I);
                    var i = EA.toArrayBuffer(t.signatureKey);
                    return e.crypto.Ed25519Verify(new Uint8Array(i), new Uint8Array(n), new Uint8Array(g)).then(function () {
                        return this.fillMessageKeys(t, o.iteration).then(function () {
                            var A = t.messageKeys[o.iteration];
                            if (A === undefined) {
                                var i = new Error("Message key not found. The counter was repeated or the key was not filled.");
                                i.name = "MessageCounterError";
                                throw i;
                            }
                            delete t.messageKeys[o.iteration];
                            return e.HKDF(EA.toArrayBuffer(A), new ArrayBuffer(32), "WhisperGroup");
                        }.bind(this)).then(function (A) {
                            var t = this.hkdkOutputToSymmetricMaterial(A[0], A[1]);
                            return e.crypto.decrypt(t.key, o.ciphertext.toArrayBuffer(), t.iv);
                        }.bind(this)).then(function (e) {
                            return this.storage.storeSenderKey(this.getSenderKeyName(), A.prepareRecord()).then(function () {
                                return e;
                            });
                        }.bind(this));
                    }.bind(this));
                }.bind(this));
            }.bind(this));
        },
        fillMessageKeys: function (A, t) {
            if (A.chainKey.counter > t) {
                return Promise.resolve();
            }
            if (t - A.chainKey.counter > 2000) {
                throw new Error("Over 2000 messages into the future!");
            }
            if (A.chainKey.key === undefined) {
                throw new Error("Got invalid request to extend chain after it was already closed");
            }
            var i = EA.toArrayBuffer(A.chainKey.key);
            var r = new Uint8Array(1);
            r[0] = 1;
            return e.crypto.sign(i, r.buffer).then(function (n) {
                A.messageKeys[A.chainKey.counter] = n;
                r[0] = 2;
                return e.crypto.sign(i, r.buffer).then(function (e) {
                    A.chainKey.key = e;
                    A.chainKey.counter += 1;
                    return this.fillMessageKeys(A, t);
                }.bind(this));
            }.bind(this));
        },
        createSenderKeyDistributionMsg: function () {
            var A = new yA(this.storage, this.remoteAddress.toString(), this.groupId.toString());
            return this.getRecord().then(function (t) {
                if (!t) {
                    t = new e.SenderKeyRecord();
                }
                return A.create(t);
            }.bind(this));
        },
        decryptSenderKeyDistributionMessage: function (A) {
            var t = (A = dcodeIO.ByteBuffer.wrap(A)).readUint8();
            if ((t & 15) > 3 || t >> 4 < 3) {
                throw new Error("Incompatible version number on PreKeyWhisperMessage");
            }
            this.remoteAddress.toString();
            return e.GroupSessionLock.queueJobForNumber(this.getSenderKeyName(), function () {
                return this.getRecord().then(function (t) {
                    if (!t) {
                        t = new e.SenderKeyRecord();
                    }
                    var i = e.protobuf.SenderKeyDistributionMessage.decode(A);
                    return new yA(this.storage, this.remoteAddress.toString(), this.groupId.toString()).process(this.getSenderKeyName(), t, i);
                }.bind(this));
            }.bind(this));
        }
    };
    libsignal.GroupCipher = function (A, e, t) {
        var i = new dA(A, e, t);
        this.decryptSenderKeyDistributionMessage = i.decryptSenderKeyDistributionMessage.bind(i);
        this.createSenderKeyDistributionMsg = i.createSenderKeyDistributionMsg.bind(i);
        this.encrypt = i.encrypt.bind(i);
        this.fillMessageKeys = i.fillMessageKeys.bind(i);
        this.getSenderKeyName = i.getSenderKeyName.bind(i);
        this.decryptSenderKeyMessage = i.decryptSenderKeyMessage.bind(i);
        this.getRecord = i.getRecord.bind(i);
    };
    pA.prototype = {
        getRecord: function (A) {
            return this.storage.loadSession(A).then(function (A) {
                if (A !== undefined) {
                    return e.SessionRecord.initRecordFromData(A);
                }
            });
        },
        getSessionBaseKey: function () {
            return e.SessionLock.queueJobForNumber(this.remoteAddress.toString(), function () {
                return this.getRecord(this.remoteAddress.toString()).then(function (A) {
                    if (A !== undefined) {
                        var e = A.getOpenSession();
                        if (e !== undefined) {
                            return EA.toArrayBuffer(e.indexInfo.baseKey);
                        }
                    }
                });
            }.bind(this));
        }
    };
    libsignal.SessionInfo = function (A, e) {
        var t = new pA(A, e);
        this.getSessionBaseKey = t.getSessionBaseKey.bind(t);
    };
}();